// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/greboid/puzzad/ent/migrate"

	"github.com/greboid/puzzad/ent/adventure"
	"github.com/greboid/puzzad/ent/game"
	"github.com/greboid/puzzad/ent/guess"
	"github.com/greboid/puzzad/ent/puzzle"
	"github.com/greboid/puzzad/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Adventure is the client for interacting with the Adventure builders.
	Adventure *AdventureClient
	// Game is the client for interacting with the Game builders.
	Game *GameClient
	// Guess is the client for interacting with the Guess builders.
	Guess *GuessClient
	// Puzzle is the client for interacting with the Puzzle builders.
	Puzzle *PuzzleClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Adventure = NewAdventureClient(c.config)
	c.Game = NewGameClient(c.config)
	c.Guess = NewGuessClient(c.config)
	c.Puzzle = NewPuzzleClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Adventure: NewAdventureClient(cfg),
		Game:      NewGameClient(cfg),
		Guess:     NewGuessClient(cfg),
		Puzzle:    NewPuzzleClient(cfg),
		User:      NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Adventure: NewAdventureClient(cfg),
		Game:      NewGameClient(cfg),
		Guess:     NewGuessClient(cfg),
		Puzzle:    NewPuzzleClient(cfg),
		User:      NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Adventure.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Adventure.Use(hooks...)
	c.Game.Use(hooks...)
	c.Guess.Use(hooks...)
	c.Puzzle.Use(hooks...)
	c.User.Use(hooks...)
}

// AdventureClient is a client for the Adventure schema.
type AdventureClient struct {
	config
}

// NewAdventureClient returns a client for the Adventure from the given config.
func NewAdventureClient(c config) *AdventureClient {
	return &AdventureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adventure.Hooks(f(g(h())))`.
func (c *AdventureClient) Use(hooks ...Hook) {
	c.hooks.Adventure = append(c.hooks.Adventure, hooks...)
}

// Create returns a builder for creating a Adventure entity.
func (c *AdventureClient) Create() *AdventureCreate {
	mutation := newAdventureMutation(c.config, OpCreate)
	return &AdventureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Adventure entities.
func (c *AdventureClient) CreateBulk(builders ...*AdventureCreate) *AdventureCreateBulk {
	return &AdventureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Adventure.
func (c *AdventureClient) Update() *AdventureUpdate {
	mutation := newAdventureMutation(c.config, OpUpdate)
	return &AdventureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdventureClient) UpdateOne(a *Adventure) *AdventureUpdateOne {
	mutation := newAdventureMutation(c.config, OpUpdateOne, withAdventure(a))
	return &AdventureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdventureClient) UpdateOneID(id int) *AdventureUpdateOne {
	mutation := newAdventureMutation(c.config, OpUpdateOne, withAdventureID(id))
	return &AdventureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Adventure.
func (c *AdventureClient) Delete() *AdventureDelete {
	mutation := newAdventureMutation(c.config, OpDelete)
	return &AdventureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdventureClient) DeleteOne(a *Adventure) *AdventureDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AdventureClient) DeleteOneID(id int) *AdventureDeleteOne {
	builder := c.Delete().Where(adventure.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdventureDeleteOne{builder}
}

// Query returns a query builder for Adventure.
func (c *AdventureClient) Query() *AdventureQuery {
	return &AdventureQuery{
		config: c.config,
	}
}

// Get returns a Adventure entity by its id.
func (c *AdventureClient) Get(ctx context.Context, id int) (*Adventure, error) {
	return c.Query().Where(adventure.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdventureClient) GetX(ctx context.Context, id int) *Adventure {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGame queries the game edge of a Adventure.
func (c *AdventureClient) QueryGame(a *Adventure) *GameQuery {
	query := &GameQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adventure.Table, adventure.FieldID, id),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, adventure.GameTable, adventure.GameColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPuzzles queries the puzzles edge of a Adventure.
func (c *AdventureClient) QueryPuzzles(a *Adventure) *PuzzleQuery {
	query := &PuzzleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adventure.Table, adventure.FieldID, id),
			sqlgraph.To(puzzle.Table, puzzle.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, adventure.PuzzlesTable, adventure.PuzzlesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdventureClient) Hooks() []Hook {
	return c.hooks.Adventure
}

// GameClient is a client for the Game schema.
type GameClient struct {
	config
}

// NewGameClient returns a client for the Game from the given config.
func NewGameClient(c config) *GameClient {
	return &GameClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `game.Hooks(f(g(h())))`.
func (c *GameClient) Use(hooks ...Hook) {
	c.hooks.Game = append(c.hooks.Game, hooks...)
}

// Create returns a builder for creating a Game entity.
func (c *GameClient) Create() *GameCreate {
	mutation := newGameMutation(c.config, OpCreate)
	return &GameCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Game entities.
func (c *GameClient) CreateBulk(builders ...*GameCreate) *GameCreateBulk {
	return &GameCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Game.
func (c *GameClient) Update() *GameUpdate {
	mutation := newGameMutation(c.config, OpUpdate)
	return &GameUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GameClient) UpdateOne(ga *Game) *GameUpdateOne {
	mutation := newGameMutation(c.config, OpUpdateOne, withGame(ga))
	return &GameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GameClient) UpdateOneID(id int) *GameUpdateOne {
	mutation := newGameMutation(c.config, OpUpdateOne, withGameID(id))
	return &GameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Game.
func (c *GameClient) Delete() *GameDelete {
	mutation := newGameMutation(c.config, OpDelete)
	return &GameDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GameClient) DeleteOne(ga *Game) *GameDeleteOne {
	return c.DeleteOneID(ga.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GameClient) DeleteOneID(id int) *GameDeleteOne {
	builder := c.Delete().Where(game.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GameDeleteOne{builder}
}

// Query returns a query builder for Game.
func (c *GameClient) Query() *GameQuery {
	return &GameQuery{
		config: c.config,
	}
}

// Get returns a Game entity by its id.
func (c *GameClient) Get(ctx context.Context, id int) (*Game, error) {
	return c.Query().Where(game.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GameClient) GetX(ctx context.Context, id int) *Game {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Game.
func (c *GameClient) QueryUser(ga *Game) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, game.UserTable, game.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdventure queries the adventure edge of a Game.
func (c *GameClient) QueryAdventure(ga *Game) *AdventureQuery {
	query := &AdventureQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, id),
			sqlgraph.To(adventure.Table, adventure.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, game.AdventureTable, game.AdventureColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCurrentPuzzle queries the current_puzzle edge of a Game.
func (c *GameClient) QueryCurrentPuzzle(ga *Game) *PuzzleQuery {
	query := &PuzzleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, id),
			sqlgraph.To(puzzle.Table, puzzle.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, game.CurrentPuzzleTable, game.CurrentPuzzleColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GameClient) Hooks() []Hook {
	return c.hooks.Game
}

// GuessClient is a client for the Guess schema.
type GuessClient struct {
	config
}

// NewGuessClient returns a client for the Guess from the given config.
func NewGuessClient(c config) *GuessClient {
	return &GuessClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `guess.Hooks(f(g(h())))`.
func (c *GuessClient) Use(hooks ...Hook) {
	c.hooks.Guess = append(c.hooks.Guess, hooks...)
}

// Create returns a builder for creating a Guess entity.
func (c *GuessClient) Create() *GuessCreate {
	mutation := newGuessMutation(c.config, OpCreate)
	return &GuessCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Guess entities.
func (c *GuessClient) CreateBulk(builders ...*GuessCreate) *GuessCreateBulk {
	return &GuessCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Guess.
func (c *GuessClient) Update() *GuessUpdate {
	mutation := newGuessMutation(c.config, OpUpdate)
	return &GuessUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GuessClient) UpdateOne(gu *Guess) *GuessUpdateOne {
	mutation := newGuessMutation(c.config, OpUpdateOne, withGuess(gu))
	return &GuessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GuessClient) UpdateOneID(id int) *GuessUpdateOne {
	mutation := newGuessMutation(c.config, OpUpdateOne, withGuessID(id))
	return &GuessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Guess.
func (c *GuessClient) Delete() *GuessDelete {
	mutation := newGuessMutation(c.config, OpDelete)
	return &GuessDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GuessClient) DeleteOne(gu *Guess) *GuessDeleteOne {
	return c.DeleteOneID(gu.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GuessClient) DeleteOneID(id int) *GuessDeleteOne {
	builder := c.Delete().Where(guess.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GuessDeleteOne{builder}
}

// Query returns a query builder for Guess.
func (c *GuessClient) Query() *GuessQuery {
	return &GuessQuery{
		config: c.config,
	}
}

// Get returns a Guess entity by its id.
func (c *GuessClient) Get(ctx context.Context, id int) (*Guess, error) {
	return c.Query().Where(guess.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GuessClient) GetX(ctx context.Context, id int) *Guess {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPuzzle queries the puzzle edge of a Guess.
func (c *GuessClient) QueryPuzzle(gu *Guess) *PuzzleQuery {
	query := &PuzzleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guess.Table, guess.FieldID, id),
			sqlgraph.To(puzzle.Table, puzzle.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, guess.PuzzleTable, guess.PuzzleColumn),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeam queries the team edge of a Guess.
func (c *GuessClient) QueryTeam(gu *Guess) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guess.Table, guess.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, guess.TeamTable, guess.TeamColumn),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GuessClient) Hooks() []Hook {
	return c.hooks.Guess
}

// PuzzleClient is a client for the Puzzle schema.
type PuzzleClient struct {
	config
}

// NewPuzzleClient returns a client for the Puzzle from the given config.
func NewPuzzleClient(c config) *PuzzleClient {
	return &PuzzleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `puzzle.Hooks(f(g(h())))`.
func (c *PuzzleClient) Use(hooks ...Hook) {
	c.hooks.Puzzle = append(c.hooks.Puzzle, hooks...)
}

// Create returns a builder for creating a Puzzle entity.
func (c *PuzzleClient) Create() *PuzzleCreate {
	mutation := newPuzzleMutation(c.config, OpCreate)
	return &PuzzleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Puzzle entities.
func (c *PuzzleClient) CreateBulk(builders ...*PuzzleCreate) *PuzzleCreateBulk {
	return &PuzzleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Puzzle.
func (c *PuzzleClient) Update() *PuzzleUpdate {
	mutation := newPuzzleMutation(c.config, OpUpdate)
	return &PuzzleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PuzzleClient) UpdateOne(pu *Puzzle) *PuzzleUpdateOne {
	mutation := newPuzzleMutation(c.config, OpUpdateOne, withPuzzle(pu))
	return &PuzzleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PuzzleClient) UpdateOneID(id int) *PuzzleUpdateOne {
	mutation := newPuzzleMutation(c.config, OpUpdateOne, withPuzzleID(id))
	return &PuzzleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Puzzle.
func (c *PuzzleClient) Delete() *PuzzleDelete {
	mutation := newPuzzleMutation(c.config, OpDelete)
	return &PuzzleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PuzzleClient) DeleteOne(pu *Puzzle) *PuzzleDeleteOne {
	return c.DeleteOneID(pu.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PuzzleClient) DeleteOneID(id int) *PuzzleDeleteOne {
	builder := c.Delete().Where(puzzle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PuzzleDeleteOne{builder}
}

// Query returns a query builder for Puzzle.
func (c *PuzzleClient) Query() *PuzzleQuery {
	return &PuzzleQuery{
		config: c.config,
	}
}

// Get returns a Puzzle entity by its id.
func (c *PuzzleClient) Get(ctx context.Context, id int) (*Puzzle, error) {
	return c.Query().Where(puzzle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PuzzleClient) GetX(ctx context.Context, id int) *Puzzle {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAdventure queries the adventure edge of a Puzzle.
func (c *PuzzleClient) QueryAdventure(pu *Puzzle) *AdventureQuery {
	query := &AdventureQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(puzzle.Table, puzzle.FieldID, id),
			sqlgraph.To(adventure.Table, adventure.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, puzzle.AdventureTable, puzzle.AdventureColumn),
		)
		fromV = sqlgraph.Neighbors(pu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PuzzleClient) Hooks() []Hook {
	return c.hooks.Puzzle
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGame queries the game edge of a User.
func (c *UserClient) QueryGame(u *User) *GameQuery {
	query := &GameQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GameTable, user.GameColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
