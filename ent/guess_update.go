// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/greboid/puzzad/ent/guess"
	"github.com/greboid/puzzad/ent/predicate"
	"github.com/greboid/puzzad/ent/question"
	"github.com/greboid/puzzad/ent/team"
)

// GuessUpdate is the builder for updating Guess entities.
type GuessUpdate struct {
	config
	hooks    []Hook
	mutation *GuessMutation
}

// Where appends a list predicates to the GuessUpdate builder.
func (gu *GuessUpdate) Where(ps ...predicate.Guess) *GuessUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetContent sets the "content" field.
func (gu *GuessUpdate) SetContent(s string) *GuessUpdate {
	gu.mutation.SetContent(s)
	return gu
}

// AddQuestionIDs adds the "question" edge to the Question entity by IDs.
func (gu *GuessUpdate) AddQuestionIDs(ids ...int) *GuessUpdate {
	gu.mutation.AddQuestionIDs(ids...)
	return gu
}

// AddQuestion adds the "question" edges to the Question entity.
func (gu *GuessUpdate) AddQuestion(q ...*Question) *GuessUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return gu.AddQuestionIDs(ids...)
}

// AddTeamIDs adds the "team" edge to the Team entity by IDs.
func (gu *GuessUpdate) AddTeamIDs(ids ...int) *GuessUpdate {
	gu.mutation.AddTeamIDs(ids...)
	return gu
}

// AddTeam adds the "team" edges to the Team entity.
func (gu *GuessUpdate) AddTeam(t ...*Team) *GuessUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gu.AddTeamIDs(ids...)
}

// Mutation returns the GuessMutation object of the builder.
func (gu *GuessUpdate) Mutation() *GuessMutation {
	return gu.mutation
}

// ClearQuestion clears all "question" edges to the Question entity.
func (gu *GuessUpdate) ClearQuestion() *GuessUpdate {
	gu.mutation.ClearQuestion()
	return gu
}

// RemoveQuestionIDs removes the "question" edge to Question entities by IDs.
func (gu *GuessUpdate) RemoveQuestionIDs(ids ...int) *GuessUpdate {
	gu.mutation.RemoveQuestionIDs(ids...)
	return gu
}

// RemoveQuestion removes "question" edges to Question entities.
func (gu *GuessUpdate) RemoveQuestion(q ...*Question) *GuessUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return gu.RemoveQuestionIDs(ids...)
}

// ClearTeam clears all "team" edges to the Team entity.
func (gu *GuessUpdate) ClearTeam() *GuessUpdate {
	gu.mutation.ClearTeam()
	return gu
}

// RemoveTeamIDs removes the "team" edge to Team entities by IDs.
func (gu *GuessUpdate) RemoveTeamIDs(ids ...int) *GuessUpdate {
	gu.mutation.RemoveTeamIDs(ids...)
	return gu
}

// RemoveTeam removes "team" edges to Team entities.
func (gu *GuessUpdate) RemoveTeam(t ...*Team) *GuessUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gu.RemoveTeamIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GuessUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gu.hooks) == 0 {
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GuessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			if gu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GuessUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GuessUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GuessUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GuessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   guess.Table,
			Columns: guess.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: guess.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guess.FieldContent,
		})
	}
	if gu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guess.QuestionTable,
			Columns: []string{guess.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedQuestionIDs(); len(nodes) > 0 && !gu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guess.QuestionTable,
			Columns: []string{guess.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guess.QuestionTable,
			Columns: []string{guess.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guess.TeamTable,
			Columns: []string{guess.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedTeamIDs(); len(nodes) > 0 && !gu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guess.TeamTable,
			Columns: []string{guess.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guess.TeamTable,
			Columns: []string{guess.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GuessUpdateOne is the builder for updating a single Guess entity.
type GuessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GuessMutation
}

// SetContent sets the "content" field.
func (guo *GuessUpdateOne) SetContent(s string) *GuessUpdateOne {
	guo.mutation.SetContent(s)
	return guo
}

// AddQuestionIDs adds the "question" edge to the Question entity by IDs.
func (guo *GuessUpdateOne) AddQuestionIDs(ids ...int) *GuessUpdateOne {
	guo.mutation.AddQuestionIDs(ids...)
	return guo
}

// AddQuestion adds the "question" edges to the Question entity.
func (guo *GuessUpdateOne) AddQuestion(q ...*Question) *GuessUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return guo.AddQuestionIDs(ids...)
}

// AddTeamIDs adds the "team" edge to the Team entity by IDs.
func (guo *GuessUpdateOne) AddTeamIDs(ids ...int) *GuessUpdateOne {
	guo.mutation.AddTeamIDs(ids...)
	return guo
}

// AddTeam adds the "team" edges to the Team entity.
func (guo *GuessUpdateOne) AddTeam(t ...*Team) *GuessUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return guo.AddTeamIDs(ids...)
}

// Mutation returns the GuessMutation object of the builder.
func (guo *GuessUpdateOne) Mutation() *GuessMutation {
	return guo.mutation
}

// ClearQuestion clears all "question" edges to the Question entity.
func (guo *GuessUpdateOne) ClearQuestion() *GuessUpdateOne {
	guo.mutation.ClearQuestion()
	return guo
}

// RemoveQuestionIDs removes the "question" edge to Question entities by IDs.
func (guo *GuessUpdateOne) RemoveQuestionIDs(ids ...int) *GuessUpdateOne {
	guo.mutation.RemoveQuestionIDs(ids...)
	return guo
}

// RemoveQuestion removes "question" edges to Question entities.
func (guo *GuessUpdateOne) RemoveQuestion(q ...*Question) *GuessUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return guo.RemoveQuestionIDs(ids...)
}

// ClearTeam clears all "team" edges to the Team entity.
func (guo *GuessUpdateOne) ClearTeam() *GuessUpdateOne {
	guo.mutation.ClearTeam()
	return guo
}

// RemoveTeamIDs removes the "team" edge to Team entities by IDs.
func (guo *GuessUpdateOne) RemoveTeamIDs(ids ...int) *GuessUpdateOne {
	guo.mutation.RemoveTeamIDs(ids...)
	return guo
}

// RemoveTeam removes "team" edges to Team entities.
func (guo *GuessUpdateOne) RemoveTeam(t ...*Team) *GuessUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return guo.RemoveTeamIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GuessUpdateOne) Select(field string, fields ...string) *GuessUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Guess entity.
func (guo *GuessUpdateOne) Save(ctx context.Context) (*Guess, error) {
	var (
		err  error
		node *Guess
	)
	if len(guo.hooks) == 0 {
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GuessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			if guo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, guo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Guess)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GuessMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GuessUpdateOne) SaveX(ctx context.Context) *Guess {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GuessUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GuessUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GuessUpdateOne) sqlSave(ctx context.Context) (_node *Guess, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   guess.Table,
			Columns: guess.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: guess.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Guess.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guess.FieldID)
		for _, f := range fields {
			if !guess.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != guess.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guess.FieldContent,
		})
	}
	if guo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guess.QuestionTable,
			Columns: []string{guess.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedQuestionIDs(); len(nodes) > 0 && !guo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guess.QuestionTable,
			Columns: []string{guess.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guess.QuestionTable,
			Columns: []string{guess.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guess.TeamTable,
			Columns: []string{guess.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedTeamIDs(); len(nodes) > 0 && !guo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guess.TeamTable,
			Columns: []string{guess.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guess.TeamTable,
			Columns: []string{guess.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Guess{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
