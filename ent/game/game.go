// Code generated by ent, DO NOT EDIT.

package game

import (
	"fmt"
)

const (
	// Label holds the string label denoting the game type in the database.
	Label = "game"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldAdventureID holds the string denoting the adventure_id field in the database.
	FieldAdventureID = "adventure_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeAdventures holds the string denoting the adventures edge name in mutations.
	EdgeAdventures = "adventures"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// AdventureFieldID holds the string denoting the ID field of the Adventure.
	AdventureFieldID = "id"
	// Table holds the table name of the game in the database.
	Table = "games"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "games"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// AdventuresTable is the table that holds the adventures relation/edge.
	AdventuresTable = "games"
	// AdventuresInverseTable is the table name for the Adventure entity.
	// It exists in this package in order to avoid circular dependency with the "adventure" package.
	AdventuresInverseTable = "adventures"
	// AdventuresColumn is the table column denoting the adventures relation/edge.
	AdventuresColumn = "adventure_id"
)

// Columns holds all SQL columns for game fields.
var Columns = []string{
	FieldStatus,
	FieldCode,
	FieldUserID,
	FieldAdventureID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCode holds the default value on creation for the "code" field.
	DefaultCode func() string
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
)

// Status defines the type for the "status" enum field.
type Status string

// StatusUnpaid is the default value of the Status enum.
const DefaultStatus = StatusUnpaid

// Status values.
const (
	StatusPaid    Status = "Paid"
	StatusUnpaid  Status = "Unpaid"
	StatusExpired Status = "Expired"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPaid, StatusUnpaid, StatusExpired:
		return nil
	default:
		return fmt.Errorf("game: invalid enum value for status field: %q", s)
	}
}
