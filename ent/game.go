// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/greboid/puzzad/ent/adventure"
	"github.com/greboid/puzzad/ent/game"
	"github.com/greboid/puzzad/ent/user"
)

// Game is the model entity for the Game schema.
type Game struct {
	config `json:"-"`
	// Status holds the value of the "status" field.
	Status game.Status `json:"status,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// AdventureID holds the value of the "adventure_id" field.
	AdventureID int `json:"adventure_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameQuery when eager-loading is set.
	Edges GameEdges `json:"edges"`
}

// GameEdges holds the relations/edges for other nodes in the graph.
type GameEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Adventures holds the value of the adventures edge.
	Adventures *Adventure `json:"adventures,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AdventuresOrErr returns the Adventures value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameEdges) AdventuresOrErr() (*Adventure, error) {
	if e.loadedTypes[1] {
		if e.Adventures == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: adventure.Label}
		}
		return e.Adventures, nil
	}
	return nil, &NotLoadedError{edge: "adventures"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Game) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case game.FieldUserID, game.FieldAdventureID:
			values[i] = new(sql.NullInt64)
		case game.FieldStatus, game.FieldCode:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Game", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Game fields.
func (ga *Game) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case game.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ga.Status = game.Status(value.String)
			}
		case game.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				ga.Code = value.String
			}
		case game.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ga.UserID = int(value.Int64)
			}
		case game.FieldAdventureID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field adventure_id", values[i])
			} else if value.Valid {
				ga.AdventureID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Game entity.
func (ga *Game) QueryUser() *UserQuery {
	return (&GameClient{config: ga.config}).QueryUser(ga)
}

// QueryAdventures queries the "adventures" edge of the Game entity.
func (ga *Game) QueryAdventures() *AdventureQuery {
	return (&GameClient{config: ga.config}).QueryAdventures(ga)
}

// Update returns a builder for updating this Game.
// Note that you need to call Game.Unwrap() before calling this method if this Game
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *Game) Update() *GameUpdateOne {
	return (&GameClient{config: ga.config}).UpdateOne(ga)
}

// Unwrap unwraps the Game entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *Game) Unwrap() *Game {
	_tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("ent: Game is not a transactional entity")
	}
	ga.config.driver = _tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *Game) String() string {
	var builder strings.Builder
	builder.WriteString("Game(")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ga.Status))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(ga.Code)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ga.UserID))
	builder.WriteString(", ")
	builder.WriteString("adventure_id=")
	builder.WriteString(fmt.Sprintf("%v", ga.AdventureID))
	builder.WriteByte(')')
	return builder.String()
}

// Games is a parsable slice of Game.
type Games []*Game

func (ga Games) config(cfg config) {
	for _i := range ga {
		ga[_i].config = cfg
	}
}
