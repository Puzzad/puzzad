// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/greboid/puzzad/ent/adventure"
	"github.com/greboid/puzzad/ent/puzzle"
)

// Puzzle is the model entity for the Puzzle schema.
type Puzzle struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Answer holds the value of the "answer" field.
	Answer string `json:"answer,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Content holds the value of the "content" field.
	Content []byte `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PuzzleQuery when eager-loading is set.
	Edges             PuzzleEdges `json:"edges"`
	adventure_puzzles *int
	guess_puzzle      *int
}

// PuzzleEdges holds the relations/edges for other nodes in the graph.
type PuzzleEdges struct {
	// Adventure holds the value of the adventure edge.
	Adventure *Adventure `json:"adventure,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AdventureOrErr returns the Adventure value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PuzzleEdges) AdventureOrErr() (*Adventure, error) {
	if e.loadedTypes[0] {
		if e.Adventure == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: adventure.Label}
		}
		return e.Adventure, nil
	}
	return nil, &NotLoadedError{edge: "adventure"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Puzzle) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case puzzle.FieldContent:
			values[i] = new([]byte)
		case puzzle.FieldID, puzzle.FieldOrder:
			values[i] = new(sql.NullInt64)
		case puzzle.FieldTitle, puzzle.FieldAnswer:
			values[i] = new(sql.NullString)
		case puzzle.ForeignKeys[0]: // adventure_puzzles
			values[i] = new(sql.NullInt64)
		case puzzle.ForeignKeys[1]: // guess_puzzle
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Puzzle", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Puzzle fields.
func (pu *Puzzle) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case puzzle.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pu.ID = int(value.Int64)
		case puzzle.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pu.Title = value.String
			}
		case puzzle.FieldAnswer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field answer", values[i])
			} else if value.Valid {
				pu.Answer = value.String
			}
		case puzzle.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				pu.Order = int(value.Int64)
			}
		case puzzle.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil {
				pu.Content = *value
			}
		case puzzle.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field adventure_puzzles", value)
			} else if value.Valid {
				pu.adventure_puzzles = new(int)
				*pu.adventure_puzzles = int(value.Int64)
			}
		case puzzle.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field guess_puzzle", value)
			} else if value.Valid {
				pu.guess_puzzle = new(int)
				*pu.guess_puzzle = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAdventure queries the "adventure" edge of the Puzzle entity.
func (pu *Puzzle) QueryAdventure() *AdventureQuery {
	return (&PuzzleClient{config: pu.config}).QueryAdventure(pu)
}

// Update returns a builder for updating this Puzzle.
// Note that you need to call Puzzle.Unwrap() before calling this method if this Puzzle
// was returned from a transaction, and the transaction was committed or rolled back.
func (pu *Puzzle) Update() *PuzzleUpdateOne {
	return (&PuzzleClient{config: pu.config}).UpdateOne(pu)
}

// Unwrap unwraps the Puzzle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pu *Puzzle) Unwrap() *Puzzle {
	_tx, ok := pu.config.driver.(*txDriver)
	if !ok {
		panic("ent: Puzzle is not a transactional entity")
	}
	pu.config.driver = _tx.drv
	return pu
}

// String implements the fmt.Stringer.
func (pu *Puzzle) String() string {
	var builder strings.Builder
	builder.WriteString("Puzzle(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pu.ID))
	builder.WriteString("title=")
	builder.WriteString(pu.Title)
	builder.WriteString(", ")
	builder.WriteString("answer=")
	builder.WriteString(pu.Answer)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", pu.Order))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(fmt.Sprintf("%v", pu.Content))
	builder.WriteByte(')')
	return builder.String()
}

// Puzzles is a parsable slice of Puzzle.
type Puzzles []*Puzzle

func (pu Puzzles) config(cfg config) {
	for _i := range pu {
		pu[_i].config = cfg
	}
}
