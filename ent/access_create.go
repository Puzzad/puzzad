// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/greboid/puzzad/ent/access"
	"github.com/greboid/puzzad/ent/adventure"
	"github.com/greboid/puzzad/ent/team"
)

// AccessCreate is the builder for creating a Access entity.
type AccessCreate struct {
	config
	mutation *AccessMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (ac *AccessCreate) SetStatus(a access.Status) *AccessCreate {
	ac.mutation.SetStatus(a)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AccessCreate) SetNillableStatus(a *access.Status) *AccessCreate {
	if a != nil {
		ac.SetStatus(*a)
	}
	return ac
}

// SetTeamID sets the "team_id" field.
func (ac *AccessCreate) SetTeamID(i int) *AccessCreate {
	ac.mutation.SetTeamID(i)
	return ac
}

// SetAdventureID sets the "adventure_id" field.
func (ac *AccessCreate) SetAdventureID(i int) *AccessCreate {
	ac.mutation.SetAdventureID(i)
	return ac
}

// SetTeam sets the "team" edge to the Team entity.
func (ac *AccessCreate) SetTeam(t *Team) *AccessCreate {
	return ac.SetTeamID(t.ID)
}

// SetAdventuresID sets the "adventures" edge to the Adventure entity by ID.
func (ac *AccessCreate) SetAdventuresID(id int) *AccessCreate {
	ac.mutation.SetAdventuresID(id)
	return ac
}

// SetAdventures sets the "adventures" edge to the Adventure entity.
func (ac *AccessCreate) SetAdventures(a *Adventure) *AccessCreate {
	return ac.SetAdventuresID(a.ID)
}

// Mutation returns the AccessMutation object of the builder.
func (ac *AccessCreate) Mutation() *AccessMutation {
	return ac.mutation
}

// Save creates the Access in the database.
func (ac *AccessCreate) Save(ctx context.Context) (*Access, error) {
	var (
		err  error
		node *Access
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Access)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AccessMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccessCreate) SaveX(ctx context.Context) *Access {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AccessCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AccessCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AccessCreate) defaults() {
	if _, ok := ac.mutation.Status(); !ok {
		v := access.DefaultStatus
		ac.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AccessCreate) check() error {
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Access.status"`)}
	}
	if v, ok := ac.mutation.Status(); ok {
		if err := access.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Access.status": %w`, err)}
		}
	}
	if _, ok := ac.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`ent: missing required field "Access.team_id"`)}
	}
	if _, ok := ac.mutation.AdventureID(); !ok {
		return &ValidationError{Name: "adventure_id", err: errors.New(`ent: missing required field "Access.adventure_id"`)}
	}
	if _, ok := ac.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`ent: missing required edge "Access.team"`)}
	}
	if _, ok := ac.mutation.AdventuresID(); !ok {
		return &ValidationError{Name: "adventures", err: errors.New(`ent: missing required edge "Access.adventures"`)}
	}
	return nil
}

func (ac *AccessCreate) sqlSave(ctx context.Context) (*Access, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (ac *AccessCreate) createSpec() (*Access, *sqlgraph.CreateSpec) {
	var (
		_node = &Access{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: access.Table,
		}
	)
	if value, ok := ac.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: access.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := ac.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   access.TeamTable,
			Columns: []string{access.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AdventuresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   access.AdventuresTable,
			Columns: []string{access.AdventuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adventure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AdventureID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccessCreateBulk is the builder for creating many Access entities in bulk.
type AccessCreateBulk struct {
	config
	builders []*AccessCreate
}

// Save creates the Access entities in the database.
func (acb *AccessCreateBulk) Save(ctx context.Context) ([]*Access, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Access, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AccessCreateBulk) SaveX(ctx context.Context) []*Access {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AccessCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AccessCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
