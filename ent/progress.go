// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/greboid/puzzad/ent/adventure"
	"github.com/greboid/puzzad/ent/progress"
	"github.com/greboid/puzzad/ent/question"
)

// Progress is the model entity for the Progress schema.
type Progress struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProgressQuery when eager-loading is set.
	Edges              ProgressEdges `json:"edges"`
	progress_adventure *int
	progress_question  *int
}

// ProgressEdges holds the relations/edges for other nodes in the graph.
type ProgressEdges struct {
	// Team holds the value of the team edge.
	Team []*Team `json:"team,omitempty"`
	// Adventure holds the value of the adventure edge.
	Adventure *Adventure `json:"adventure,omitempty"`
	// Question holds the value of the question edge.
	Question *Question `json:"question,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading.
func (e ProgressEdges) TeamOrErr() ([]*Team, error) {
	if e.loadedTypes[0] {
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// AdventureOrErr returns the Adventure value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgressEdges) AdventureOrErr() (*Adventure, error) {
	if e.loadedTypes[1] {
		if e.Adventure == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: adventure.Label}
		}
		return e.Adventure, nil
	}
	return nil, &NotLoadedError{edge: "adventure"}
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgressEdges) QuestionOrErr() (*Question, error) {
	if e.loadedTypes[2] {
		if e.Question == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: question.Label}
		}
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Progress) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case progress.FieldID:
			values[i] = new(sql.NullInt64)
		case progress.ForeignKeys[0]: // progress_adventure
			values[i] = new(sql.NullInt64)
		case progress.ForeignKeys[1]: // progress_question
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Progress", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Progress fields.
func (pr *Progress) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case progress.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case progress.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field progress_adventure", value)
			} else if value.Valid {
				pr.progress_adventure = new(int)
				*pr.progress_adventure = int(value.Int64)
			}
		case progress.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field progress_question", value)
			} else if value.Valid {
				pr.progress_question = new(int)
				*pr.progress_question = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTeam queries the "team" edge of the Progress entity.
func (pr *Progress) QueryTeam() *TeamQuery {
	return (&ProgressClient{config: pr.config}).QueryTeam(pr)
}

// QueryAdventure queries the "adventure" edge of the Progress entity.
func (pr *Progress) QueryAdventure() *AdventureQuery {
	return (&ProgressClient{config: pr.config}).QueryAdventure(pr)
}

// QueryQuestion queries the "question" edge of the Progress entity.
func (pr *Progress) QueryQuestion() *QuestionQuery {
	return (&ProgressClient{config: pr.config}).QueryQuestion(pr)
}

// Update returns a builder for updating this Progress.
// Note that you need to call Progress.Unwrap() before calling this method if this Progress
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Progress) Update() *ProgressUpdateOne {
	return (&ProgressClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Progress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Progress) Unwrap() *Progress {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Progress is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Progress) String() string {
	var builder strings.Builder
	builder.WriteString("Progress(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Progresses is a parsable slice of Progress.
type Progresses []*Progress

func (pr Progresses) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
