// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/greboid/puzzad/ent/adventure"
	"github.com/greboid/puzzad/ent/puzzle"
)

// PuzzleCreate is the builder for creating a Puzzle entity.
type PuzzleCreate struct {
	config
	mutation *PuzzleMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (pc *PuzzleCreate) SetTitle(s string) *PuzzleCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetAnswer sets the "answer" field.
func (pc *PuzzleCreate) SetAnswer(s string) *PuzzleCreate {
	pc.mutation.SetAnswer(s)
	return pc
}

// SetOrder sets the "order" field.
func (pc *PuzzleCreate) SetOrder(i int) *PuzzleCreate {
	pc.mutation.SetOrder(i)
	return pc
}

// SetContent sets the "content" field.
func (pc *PuzzleCreate) SetContent(b []byte) *PuzzleCreate {
	pc.mutation.SetContent(b)
	return pc
}

// SetAdventureID sets the "adventure" edge to the Adventure entity by ID.
func (pc *PuzzleCreate) SetAdventureID(id int) *PuzzleCreate {
	pc.mutation.SetAdventureID(id)
	return pc
}

// SetNillableAdventureID sets the "adventure" edge to the Adventure entity by ID if the given value is not nil.
func (pc *PuzzleCreate) SetNillableAdventureID(id *int) *PuzzleCreate {
	if id != nil {
		pc = pc.SetAdventureID(*id)
	}
	return pc
}

// SetAdventure sets the "adventure" edge to the Adventure entity.
func (pc *PuzzleCreate) SetAdventure(a *Adventure) *PuzzleCreate {
	return pc.SetAdventureID(a.ID)
}

// Mutation returns the PuzzleMutation object of the builder.
func (pc *PuzzleCreate) Mutation() *PuzzleMutation {
	return pc.mutation
}

// Save creates the Puzzle in the database.
func (pc *PuzzleCreate) Save(ctx context.Context) (*Puzzle, error) {
	var (
		err  error
		node *Puzzle
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PuzzleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Puzzle)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PuzzleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PuzzleCreate) SaveX(ctx context.Context) *Puzzle {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PuzzleCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PuzzleCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PuzzleCreate) defaults() {
	if _, ok := pc.mutation.Content(); !ok {
		v := puzzle.DefaultContent
		pc.mutation.SetContent(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PuzzleCreate) check() error {
	if _, ok := pc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Puzzle.title"`)}
	}
	if _, ok := pc.mutation.Answer(); !ok {
		return &ValidationError{Name: "answer", err: errors.New(`ent: missing required field "Puzzle.answer"`)}
	}
	if _, ok := pc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Puzzle.order"`)}
	}
	if _, ok := pc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Puzzle.content"`)}
	}
	return nil
}

func (pc *PuzzleCreate) sqlSave(ctx context.Context) (*Puzzle, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PuzzleCreate) createSpec() (*Puzzle, *sqlgraph.CreateSpec) {
	var (
		_node = &Puzzle{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: puzzle.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: puzzle.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: puzzle.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := pc.mutation.Answer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: puzzle.FieldAnswer,
		})
		_node.Answer = value
	}
	if value, ok := pc.mutation.Order(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: puzzle.FieldOrder,
		})
		_node.Order = value
	}
	if value, ok := pc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: puzzle.FieldContent,
		})
		_node.Content = value
	}
	if nodes := pc.mutation.AdventureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   puzzle.AdventureTable,
			Columns: []string{puzzle.AdventureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adventure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.adventure_puzzles = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PuzzleCreateBulk is the builder for creating many Puzzle entities in bulk.
type PuzzleCreateBulk struct {
	config
	builders []*PuzzleCreate
}

// Save creates the Puzzle entities in the database.
func (pcb *PuzzleCreateBulk) Save(ctx context.Context) ([]*Puzzle, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Puzzle, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PuzzleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PuzzleCreateBulk) SaveX(ctx context.Context) []*Puzzle {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PuzzleCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PuzzleCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
