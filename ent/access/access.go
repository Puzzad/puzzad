// Code generated by ent, DO NOT EDIT.

package access

import (
	"fmt"
)

const (
	// Label holds the string label denoting the access type in the database.
	Label = "access"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTeamID holds the string denoting the team_id field in the database.
	FieldTeamID = "team_id"
	// FieldAdventureID holds the string denoting the adventure_id field in the database.
	FieldAdventureID = "adventure_id"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// EdgeAdventures holds the string denoting the adventures edge name in mutations.
	EdgeAdventures = "adventures"
	// TeamFieldID holds the string denoting the ID field of the Team.
	TeamFieldID = "id"
	// AdventureFieldID holds the string denoting the ID field of the Adventure.
	AdventureFieldID = "id"
	// Table holds the table name of the access in the database.
	Table = "accesses"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "accesses"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_id"
	// AdventuresTable is the table that holds the adventures relation/edge.
	AdventuresTable = "accesses"
	// AdventuresInverseTable is the table name for the Adventure entity.
	// It exists in this package in order to avoid circular dependency with the "adventure" package.
	AdventuresInverseTable = "adventures"
	// AdventuresColumn is the table column denoting the adventures relation/edge.
	AdventuresColumn = "adventure_id"
)

// Columns holds all SQL columns for access fields.
var Columns = []string{
	FieldStatus,
	FieldTeamID,
	FieldAdventureID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPaid    Status = "Paid"
	StatusUnpaid  Status = "Unpaid"
	StatusExpired Status = "Expired"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPaid, StatusUnpaid, StatusExpired:
		return nil
	default:
		return fmt.Errorf("access: invalid enum value for status field: %q", s)
	}
}
