// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/greboid/puzzad/ent/guess"
	"github.com/greboid/puzzad/ent/question"
	"github.com/greboid/puzzad/ent/user"
)

// GuessCreate is the builder for creating a Guess entity.
type GuessCreate struct {
	config
	mutation *GuessMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (gc *GuessCreate) SetCreateTime(t time.Time) *GuessCreate {
	gc.mutation.SetCreateTime(t)
	return gc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (gc *GuessCreate) SetNillableCreateTime(t *time.Time) *GuessCreate {
	if t != nil {
		gc.SetCreateTime(*t)
	}
	return gc
}

// SetContent sets the "content" field.
func (gc *GuessCreate) SetContent(s string) *GuessCreate {
	gc.mutation.SetContent(s)
	return gc
}

// AddQuestionIDs adds the "question" edge to the Question entity by IDs.
func (gc *GuessCreate) AddQuestionIDs(ids ...int) *GuessCreate {
	gc.mutation.AddQuestionIDs(ids...)
	return gc
}

// AddQuestion adds the "question" edges to the Question entity.
func (gc *GuessCreate) AddQuestion(q ...*Question) *GuessCreate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return gc.AddQuestionIDs(ids...)
}

// AddTeamIDs adds the "team" edge to the User entity by IDs.
func (gc *GuessCreate) AddTeamIDs(ids ...int) *GuessCreate {
	gc.mutation.AddTeamIDs(ids...)
	return gc
}

// AddTeam adds the "team" edges to the User entity.
func (gc *GuessCreate) AddTeam(u ...*User) *GuessCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gc.AddTeamIDs(ids...)
}

// Mutation returns the GuessMutation object of the builder.
func (gc *GuessCreate) Mutation() *GuessMutation {
	return gc.mutation
}

// Save creates the Guess in the database.
func (gc *GuessCreate) Save(ctx context.Context) (*Guess, error) {
	var (
		err  error
		node *Guess
	)
	gc.defaults()
	if len(gc.hooks) == 0 {
		if err = gc.check(); err != nil {
			return nil, err
		}
		node, err = gc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GuessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gc.check(); err != nil {
				return nil, err
			}
			gc.mutation = mutation
			if node, err = gc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gc.hooks) - 1; i >= 0; i-- {
			if gc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Guess)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GuessMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GuessCreate) SaveX(ctx context.Context) *Guess {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GuessCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GuessCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GuessCreate) defaults() {
	if _, ok := gc.mutation.CreateTime(); !ok {
		v := guess.DefaultCreateTime()
		gc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GuessCreate) check() error {
	if _, ok := gc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Guess.create_time"`)}
	}
	if _, ok := gc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Guess.content"`)}
	}
	return nil
}

func (gc *GuessCreate) sqlSave(ctx context.Context) (*Guess, error) {
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (gc *GuessCreate) createSpec() (*Guess, *sqlgraph.CreateSpec) {
	var (
		_node = &Guess{config: gc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: guess.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: guess.FieldID,
			},
		}
	)
	if value, ok := gc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: guess.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := gc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guess.FieldContent,
		})
		_node.Content = value
	}
	if nodes := gc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guess.QuestionTable,
			Columns: []string{guess.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guess.TeamTable,
			Columns: []string{guess.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GuessCreateBulk is the builder for creating many Guess entities in bulk.
type GuessCreateBulk struct {
	config
	builders []*GuessCreate
}

// Save creates the Guess entities in the database.
func (gcb *GuessCreateBulk) Save(ctx context.Context) ([]*Guess, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Guess, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GuessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GuessCreateBulk) SaveX(ctx context.Context) []*Guess {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GuessCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GuessCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
