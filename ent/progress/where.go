// Code generated by ent, DO NOT EDIT.

package progress

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/greboid/puzzad/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdventure applies the HasEdge predicate on the "adventure" edge.
func HasAdventure() predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdventureTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AdventureTable, AdventureColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdventureWith applies the HasEdge predicate on the "adventure" edge with a given conditions (other predicates).
func HasAdventureWith(preds ...predicate.Adventure) predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdventureInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AdventureTable, AdventureColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPuzzle applies the HasEdge predicate on the "puzzle" edge.
func HasPuzzle() predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PuzzleTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PuzzleTable, PuzzleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPuzzleWith applies the HasEdge predicate on the "puzzle" edge with a given conditions (other predicates).
func HasPuzzleWith(preds ...predicate.Puzzle) predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PuzzleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PuzzleTable, PuzzleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Progress) predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Progress) predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Progress) predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		p(s.Not())
	})
}
