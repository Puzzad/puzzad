// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/greboid/puzzad/ent/adventure"
	"github.com/greboid/puzzad/ent/game"
	"github.com/greboid/puzzad/ent/guess"
	"github.com/greboid/puzzad/ent/predicate"
	"github.com/greboid/puzzad/ent/puzzle"
	"github.com/greboid/puzzad/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAdventure = "Adventure"
	TypeGame      = "Game"
	TypeGuess     = "Guess"
	TypePuzzle    = "Puzzle"
	TypeUser      = "User"
)

// AdventureMutation represents an operation that mutates the Adventure nodes in the graph.
type AdventureMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	clearedFields  map[string]struct{}
	game           map[int]struct{}
	removedgame    map[int]struct{}
	clearedgame    bool
	puzzles        map[int]struct{}
	removedpuzzles map[int]struct{}
	clearedpuzzles bool
	done           bool
	oldValue       func(context.Context) (*Adventure, error)
	predicates     []predicate.Adventure
}

var _ ent.Mutation = (*AdventureMutation)(nil)

// adventureOption allows management of the mutation configuration using functional options.
type adventureOption func(*AdventureMutation)

// newAdventureMutation creates new mutation for the Adventure entity.
func newAdventureMutation(c config, op Op, opts ...adventureOption) *AdventureMutation {
	m := &AdventureMutation{
		config:        c,
		op:            op,
		typ:           TypeAdventure,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdventureID sets the ID field of the mutation.
func withAdventureID(id int) adventureOption {
	return func(m *AdventureMutation) {
		var (
			err   error
			once  sync.Once
			value *Adventure
		)
		m.oldValue = func(ctx context.Context) (*Adventure, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Adventure.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdventure sets the old Adventure of the mutation.
func withAdventure(node *Adventure) adventureOption {
	return func(m *AdventureMutation) {
		m.oldValue = func(context.Context) (*Adventure, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdventureMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdventureMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdventureMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdventureMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Adventure.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AdventureMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AdventureMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Adventure entity.
// If the Adventure object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdventureMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AdventureMutation) ResetName() {
	m.name = nil
}

// AddGameIDs adds the "game" edge to the Game entity by ids.
func (m *AdventureMutation) AddGameIDs(ids ...int) {
	if m.game == nil {
		m.game = make(map[int]struct{})
	}
	for i := range ids {
		m.game[ids[i]] = struct{}{}
	}
}

// ClearGame clears the "game" edge to the Game entity.
func (m *AdventureMutation) ClearGame() {
	m.clearedgame = true
}

// GameCleared reports if the "game" edge to the Game entity was cleared.
func (m *AdventureMutation) GameCleared() bool {
	return m.clearedgame
}

// RemoveGameIDs removes the "game" edge to the Game entity by IDs.
func (m *AdventureMutation) RemoveGameIDs(ids ...int) {
	if m.removedgame == nil {
		m.removedgame = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.game, ids[i])
		m.removedgame[ids[i]] = struct{}{}
	}
}

// RemovedGame returns the removed IDs of the "game" edge to the Game entity.
func (m *AdventureMutation) RemovedGameIDs() (ids []int) {
	for id := range m.removedgame {
		ids = append(ids, id)
	}
	return
}

// GameIDs returns the "game" edge IDs in the mutation.
func (m *AdventureMutation) GameIDs() (ids []int) {
	for id := range m.game {
		ids = append(ids, id)
	}
	return
}

// ResetGame resets all changes to the "game" edge.
func (m *AdventureMutation) ResetGame() {
	m.game = nil
	m.clearedgame = false
	m.removedgame = nil
}

// AddPuzzleIDs adds the "puzzles" edge to the Puzzle entity by ids.
func (m *AdventureMutation) AddPuzzleIDs(ids ...int) {
	if m.puzzles == nil {
		m.puzzles = make(map[int]struct{})
	}
	for i := range ids {
		m.puzzles[ids[i]] = struct{}{}
	}
}

// ClearPuzzles clears the "puzzles" edge to the Puzzle entity.
func (m *AdventureMutation) ClearPuzzles() {
	m.clearedpuzzles = true
}

// PuzzlesCleared reports if the "puzzles" edge to the Puzzle entity was cleared.
func (m *AdventureMutation) PuzzlesCleared() bool {
	return m.clearedpuzzles
}

// RemovePuzzleIDs removes the "puzzles" edge to the Puzzle entity by IDs.
func (m *AdventureMutation) RemovePuzzleIDs(ids ...int) {
	if m.removedpuzzles == nil {
		m.removedpuzzles = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.puzzles, ids[i])
		m.removedpuzzles[ids[i]] = struct{}{}
	}
}

// RemovedPuzzles returns the removed IDs of the "puzzles" edge to the Puzzle entity.
func (m *AdventureMutation) RemovedPuzzlesIDs() (ids []int) {
	for id := range m.removedpuzzles {
		ids = append(ids, id)
	}
	return
}

// PuzzlesIDs returns the "puzzles" edge IDs in the mutation.
func (m *AdventureMutation) PuzzlesIDs() (ids []int) {
	for id := range m.puzzles {
		ids = append(ids, id)
	}
	return
}

// ResetPuzzles resets all changes to the "puzzles" edge.
func (m *AdventureMutation) ResetPuzzles() {
	m.puzzles = nil
	m.clearedpuzzles = false
	m.removedpuzzles = nil
}

// Where appends a list predicates to the AdventureMutation builder.
func (m *AdventureMutation) Where(ps ...predicate.Adventure) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AdventureMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Adventure).
func (m *AdventureMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdventureMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, adventure.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdventureMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adventure.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdventureMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adventure.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Adventure field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdventureMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adventure.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Adventure field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdventureMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdventureMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdventureMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Adventure numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdventureMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdventureMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdventureMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Adventure nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdventureMutation) ResetField(name string) error {
	switch name {
	case adventure.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Adventure field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdventureMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.game != nil {
		edges = append(edges, adventure.EdgeGame)
	}
	if m.puzzles != nil {
		edges = append(edges, adventure.EdgePuzzles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdventureMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case adventure.EdgeGame:
		ids := make([]ent.Value, 0, len(m.game))
		for id := range m.game {
			ids = append(ids, id)
		}
		return ids
	case adventure.EdgePuzzles:
		ids := make([]ent.Value, 0, len(m.puzzles))
		for id := range m.puzzles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdventureMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedgame != nil {
		edges = append(edges, adventure.EdgeGame)
	}
	if m.removedpuzzles != nil {
		edges = append(edges, adventure.EdgePuzzles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdventureMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case adventure.EdgeGame:
		ids := make([]ent.Value, 0, len(m.removedgame))
		for id := range m.removedgame {
			ids = append(ids, id)
		}
		return ids
	case adventure.EdgePuzzles:
		ids := make([]ent.Value, 0, len(m.removedpuzzles))
		for id := range m.removedpuzzles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdventureMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedgame {
		edges = append(edges, adventure.EdgeGame)
	}
	if m.clearedpuzzles {
		edges = append(edges, adventure.EdgePuzzles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdventureMutation) EdgeCleared(name string) bool {
	switch name {
	case adventure.EdgeGame:
		return m.clearedgame
	case adventure.EdgePuzzles:
		return m.clearedpuzzles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdventureMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Adventure unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdventureMutation) ResetEdge(name string) error {
	switch name {
	case adventure.EdgeGame:
		m.ResetGame()
		return nil
	case adventure.EdgePuzzles:
		m.ResetPuzzles()
		return nil
	}
	return fmt.Errorf("unknown Adventure edge %s", name)
}

// GameMutation represents an operation that mutates the Game nodes in the graph.
type GameMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	status                *game.Status
	code                  *string
	clearedFields         map[string]struct{}
	user                  *int
	cleareduser           bool
	adventure             *int
	clearedadventure      bool
	current_puzzle        *int
	clearedcurrent_puzzle bool
	done                  bool
	oldValue              func(context.Context) (*Game, error)
	predicates            []predicate.Game
}

var _ ent.Mutation = (*GameMutation)(nil)

// gameOption allows management of the mutation configuration using functional options.
type gameOption func(*GameMutation)

// newGameMutation creates new mutation for the Game entity.
func newGameMutation(c config, op Op, opts ...gameOption) *GameMutation {
	m := &GameMutation{
		config:        c,
		op:            op,
		typ:           TypeGame,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGameID sets the ID field of the mutation.
func withGameID(id int) gameOption {
	return func(m *GameMutation) {
		var (
			err   error
			once  sync.Once
			value *Game
		)
		m.oldValue = func(ctx context.Context) (*Game, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Game.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGame sets the old Game of the mutation.
func withGame(node *Game) gameOption {
	return func(m *GameMutation) {
		m.oldValue = func(context.Context) (*Game, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GameMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GameMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GameMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GameMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Game.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *GameMutation) SetStatus(ga game.Status) {
	m.status = &ga
}

// Status returns the value of the "status" field in the mutation.
func (m *GameMutation) Status() (r game.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Game entity.
// If the Game object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameMutation) OldStatus(ctx context.Context) (v game.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *GameMutation) ResetStatus() {
	m.status = nil
}

// SetCode sets the "code" field.
func (m *GameMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *GameMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Game entity.
// If the Game object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *GameMutation) ResetCode() {
	m.code = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *GameMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *GameMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *GameMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *GameMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *GameMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GameMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetAdventureID sets the "adventure" edge to the Adventure entity by id.
func (m *GameMutation) SetAdventureID(id int) {
	m.adventure = &id
}

// ClearAdventure clears the "adventure" edge to the Adventure entity.
func (m *GameMutation) ClearAdventure() {
	m.clearedadventure = true
}

// AdventureCleared reports if the "adventure" edge to the Adventure entity was cleared.
func (m *GameMutation) AdventureCleared() bool {
	return m.clearedadventure
}

// AdventureID returns the "adventure" edge ID in the mutation.
func (m *GameMutation) AdventureID() (id int, exists bool) {
	if m.adventure != nil {
		return *m.adventure, true
	}
	return
}

// AdventureIDs returns the "adventure" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AdventureID instead. It exists only for internal usage by the builders.
func (m *GameMutation) AdventureIDs() (ids []int) {
	if id := m.adventure; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAdventure resets all changes to the "adventure" edge.
func (m *GameMutation) ResetAdventure() {
	m.adventure = nil
	m.clearedadventure = false
}

// SetCurrentPuzzleID sets the "current_puzzle" edge to the Puzzle entity by id.
func (m *GameMutation) SetCurrentPuzzleID(id int) {
	m.current_puzzle = &id
}

// ClearCurrentPuzzle clears the "current_puzzle" edge to the Puzzle entity.
func (m *GameMutation) ClearCurrentPuzzle() {
	m.clearedcurrent_puzzle = true
}

// CurrentPuzzleCleared reports if the "current_puzzle" edge to the Puzzle entity was cleared.
func (m *GameMutation) CurrentPuzzleCleared() bool {
	return m.clearedcurrent_puzzle
}

// CurrentPuzzleID returns the "current_puzzle" edge ID in the mutation.
func (m *GameMutation) CurrentPuzzleID() (id int, exists bool) {
	if m.current_puzzle != nil {
		return *m.current_puzzle, true
	}
	return
}

// CurrentPuzzleIDs returns the "current_puzzle" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CurrentPuzzleID instead. It exists only for internal usage by the builders.
func (m *GameMutation) CurrentPuzzleIDs() (ids []int) {
	if id := m.current_puzzle; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCurrentPuzzle resets all changes to the "current_puzzle" edge.
func (m *GameMutation) ResetCurrentPuzzle() {
	m.current_puzzle = nil
	m.clearedcurrent_puzzle = false
}

// Where appends a list predicates to the GameMutation builder.
func (m *GameMutation) Where(ps ...predicate.Game) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GameMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Game).
func (m *GameMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GameMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.status != nil {
		fields = append(fields, game.FieldStatus)
	}
	if m.code != nil {
		fields = append(fields, game.FieldCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GameMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case game.FieldStatus:
		return m.Status()
	case game.FieldCode:
		return m.Code()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GameMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case game.FieldStatus:
		return m.OldStatus(ctx)
	case game.FieldCode:
		return m.OldCode(ctx)
	}
	return nil, fmt.Errorf("unknown Game field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameMutation) SetField(name string, value ent.Value) error {
	switch name {
	case game.FieldStatus:
		v, ok := value.(game.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case game.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	}
	return fmt.Errorf("unknown Game field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GameMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GameMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Game numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GameMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GameMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GameMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Game nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GameMutation) ResetField(name string) error {
	switch name {
	case game.FieldStatus:
		m.ResetStatus()
		return nil
	case game.FieldCode:
		m.ResetCode()
		return nil
	}
	return fmt.Errorf("unknown Game field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GameMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, game.EdgeUser)
	}
	if m.adventure != nil {
		edges = append(edges, game.EdgeAdventure)
	}
	if m.current_puzzle != nil {
		edges = append(edges, game.EdgeCurrentPuzzle)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GameMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case game.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case game.EdgeAdventure:
		if id := m.adventure; id != nil {
			return []ent.Value{*id}
		}
	case game.EdgeCurrentPuzzle:
		if id := m.current_puzzle; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GameMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GameMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GameMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, game.EdgeUser)
	}
	if m.clearedadventure {
		edges = append(edges, game.EdgeAdventure)
	}
	if m.clearedcurrent_puzzle {
		edges = append(edges, game.EdgeCurrentPuzzle)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GameMutation) EdgeCleared(name string) bool {
	switch name {
	case game.EdgeUser:
		return m.cleareduser
	case game.EdgeAdventure:
		return m.clearedadventure
	case game.EdgeCurrentPuzzle:
		return m.clearedcurrent_puzzle
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GameMutation) ClearEdge(name string) error {
	switch name {
	case game.EdgeUser:
		m.ClearUser()
		return nil
	case game.EdgeAdventure:
		m.ClearAdventure()
		return nil
	case game.EdgeCurrentPuzzle:
		m.ClearCurrentPuzzle()
		return nil
	}
	return fmt.Errorf("unknown Game unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GameMutation) ResetEdge(name string) error {
	switch name {
	case game.EdgeUser:
		m.ResetUser()
		return nil
	case game.EdgeAdventure:
		m.ResetAdventure()
		return nil
	case game.EdgeCurrentPuzzle:
		m.ResetCurrentPuzzle()
		return nil
	}
	return fmt.Errorf("unknown Game edge %s", name)
}

// GuessMutation represents an operation that mutates the Guess nodes in the graph.
type GuessMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	content       *string
	clearedFields map[string]struct{}
	puzzle        map[int]struct{}
	removedpuzzle map[int]struct{}
	clearedpuzzle bool
	team          map[int]struct{}
	removedteam   map[int]struct{}
	clearedteam   bool
	done          bool
	oldValue      func(context.Context) (*Guess, error)
	predicates    []predicate.Guess
}

var _ ent.Mutation = (*GuessMutation)(nil)

// guessOption allows management of the mutation configuration using functional options.
type guessOption func(*GuessMutation)

// newGuessMutation creates new mutation for the Guess entity.
func newGuessMutation(c config, op Op, opts ...guessOption) *GuessMutation {
	m := &GuessMutation{
		config:        c,
		op:            op,
		typ:           TypeGuess,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGuessID sets the ID field of the mutation.
func withGuessID(id int) guessOption {
	return func(m *GuessMutation) {
		var (
			err   error
			once  sync.Once
			value *Guess
		)
		m.oldValue = func(ctx context.Context) (*Guess, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Guess.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGuess sets the old Guess of the mutation.
func withGuess(node *Guess) guessOption {
	return func(m *GuessMutation) {
		m.oldValue = func(context.Context) (*Guess, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GuessMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GuessMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GuessMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GuessMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Guess.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *GuessMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *GuessMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Guess entity.
// If the Guess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuessMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *GuessMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetContent sets the "content" field.
func (m *GuessMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *GuessMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Guess entity.
// If the Guess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuessMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *GuessMutation) ResetContent() {
	m.content = nil
}

// AddPuzzleIDs adds the "puzzle" edge to the Puzzle entity by ids.
func (m *GuessMutation) AddPuzzleIDs(ids ...int) {
	if m.puzzle == nil {
		m.puzzle = make(map[int]struct{})
	}
	for i := range ids {
		m.puzzle[ids[i]] = struct{}{}
	}
}

// ClearPuzzle clears the "puzzle" edge to the Puzzle entity.
func (m *GuessMutation) ClearPuzzle() {
	m.clearedpuzzle = true
}

// PuzzleCleared reports if the "puzzle" edge to the Puzzle entity was cleared.
func (m *GuessMutation) PuzzleCleared() bool {
	return m.clearedpuzzle
}

// RemovePuzzleIDs removes the "puzzle" edge to the Puzzle entity by IDs.
func (m *GuessMutation) RemovePuzzleIDs(ids ...int) {
	if m.removedpuzzle == nil {
		m.removedpuzzle = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.puzzle, ids[i])
		m.removedpuzzle[ids[i]] = struct{}{}
	}
}

// RemovedPuzzle returns the removed IDs of the "puzzle" edge to the Puzzle entity.
func (m *GuessMutation) RemovedPuzzleIDs() (ids []int) {
	for id := range m.removedpuzzle {
		ids = append(ids, id)
	}
	return
}

// PuzzleIDs returns the "puzzle" edge IDs in the mutation.
func (m *GuessMutation) PuzzleIDs() (ids []int) {
	for id := range m.puzzle {
		ids = append(ids, id)
	}
	return
}

// ResetPuzzle resets all changes to the "puzzle" edge.
func (m *GuessMutation) ResetPuzzle() {
	m.puzzle = nil
	m.clearedpuzzle = false
	m.removedpuzzle = nil
}

// AddTeamIDs adds the "team" edge to the User entity by ids.
func (m *GuessMutation) AddTeamIDs(ids ...int) {
	if m.team == nil {
		m.team = make(map[int]struct{})
	}
	for i := range ids {
		m.team[ids[i]] = struct{}{}
	}
}

// ClearTeam clears the "team" edge to the User entity.
func (m *GuessMutation) ClearTeam() {
	m.clearedteam = true
}

// TeamCleared reports if the "team" edge to the User entity was cleared.
func (m *GuessMutation) TeamCleared() bool {
	return m.clearedteam
}

// RemoveTeamIDs removes the "team" edge to the User entity by IDs.
func (m *GuessMutation) RemoveTeamIDs(ids ...int) {
	if m.removedteam == nil {
		m.removedteam = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.team, ids[i])
		m.removedteam[ids[i]] = struct{}{}
	}
}

// RemovedTeam returns the removed IDs of the "team" edge to the User entity.
func (m *GuessMutation) RemovedTeamIDs() (ids []int) {
	for id := range m.removedteam {
		ids = append(ids, id)
	}
	return
}

// TeamIDs returns the "team" edge IDs in the mutation.
func (m *GuessMutation) TeamIDs() (ids []int) {
	for id := range m.team {
		ids = append(ids, id)
	}
	return
}

// ResetTeam resets all changes to the "team" edge.
func (m *GuessMutation) ResetTeam() {
	m.team = nil
	m.clearedteam = false
	m.removedteam = nil
}

// Where appends a list predicates to the GuessMutation builder.
func (m *GuessMutation) Where(ps ...predicate.Guess) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GuessMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Guess).
func (m *GuessMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GuessMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.create_time != nil {
		fields = append(fields, guess.FieldCreateTime)
	}
	if m.content != nil {
		fields = append(fields, guess.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GuessMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case guess.FieldCreateTime:
		return m.CreateTime()
	case guess.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GuessMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case guess.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case guess.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown Guess field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuessMutation) SetField(name string, value ent.Value) error {
	switch name {
	case guess.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case guess.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown Guess field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GuessMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GuessMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuessMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Guess numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GuessMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GuessMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GuessMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Guess nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GuessMutation) ResetField(name string) error {
	switch name {
	case guess.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case guess.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown Guess field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GuessMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.puzzle != nil {
		edges = append(edges, guess.EdgePuzzle)
	}
	if m.team != nil {
		edges = append(edges, guess.EdgeTeam)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GuessMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case guess.EdgePuzzle:
		ids := make([]ent.Value, 0, len(m.puzzle))
		for id := range m.puzzle {
			ids = append(ids, id)
		}
		return ids
	case guess.EdgeTeam:
		ids := make([]ent.Value, 0, len(m.team))
		for id := range m.team {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GuessMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedpuzzle != nil {
		edges = append(edges, guess.EdgePuzzle)
	}
	if m.removedteam != nil {
		edges = append(edges, guess.EdgeTeam)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GuessMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case guess.EdgePuzzle:
		ids := make([]ent.Value, 0, len(m.removedpuzzle))
		for id := range m.removedpuzzle {
			ids = append(ids, id)
		}
		return ids
	case guess.EdgeTeam:
		ids := make([]ent.Value, 0, len(m.removedteam))
		for id := range m.removedteam {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GuessMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpuzzle {
		edges = append(edges, guess.EdgePuzzle)
	}
	if m.clearedteam {
		edges = append(edges, guess.EdgeTeam)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GuessMutation) EdgeCleared(name string) bool {
	switch name {
	case guess.EdgePuzzle:
		return m.clearedpuzzle
	case guess.EdgeTeam:
		return m.clearedteam
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GuessMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Guess unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GuessMutation) ResetEdge(name string) error {
	switch name {
	case guess.EdgePuzzle:
		m.ResetPuzzle()
		return nil
	case guess.EdgeTeam:
		m.ResetTeam()
		return nil
	}
	return fmt.Errorf("unknown Guess edge %s", name)
}

// PuzzleMutation represents an operation that mutates the Puzzle nodes in the graph.
type PuzzleMutation struct {
	config
	op               Op
	typ              string
	id               *int
	title            *string
	answer           *string
	_order           *int
	add_order        *int
	clearedFields    map[string]struct{}
	adventure        *int
	clearedadventure bool
	done             bool
	oldValue         func(context.Context) (*Puzzle, error)
	predicates       []predicate.Puzzle
}

var _ ent.Mutation = (*PuzzleMutation)(nil)

// puzzleOption allows management of the mutation configuration using functional options.
type puzzleOption func(*PuzzleMutation)

// newPuzzleMutation creates new mutation for the Puzzle entity.
func newPuzzleMutation(c config, op Op, opts ...puzzleOption) *PuzzleMutation {
	m := &PuzzleMutation{
		config:        c,
		op:            op,
		typ:           TypePuzzle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPuzzleID sets the ID field of the mutation.
func withPuzzleID(id int) puzzleOption {
	return func(m *PuzzleMutation) {
		var (
			err   error
			once  sync.Once
			value *Puzzle
		)
		m.oldValue = func(ctx context.Context) (*Puzzle, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Puzzle.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPuzzle sets the old Puzzle of the mutation.
func withPuzzle(node *Puzzle) puzzleOption {
	return func(m *PuzzleMutation) {
		m.oldValue = func(context.Context) (*Puzzle, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PuzzleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PuzzleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PuzzleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PuzzleMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Puzzle.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *PuzzleMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *PuzzleMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Puzzle entity.
// If the Puzzle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PuzzleMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *PuzzleMutation) ResetTitle() {
	m.title = nil
}

// SetAnswer sets the "answer" field.
func (m *PuzzleMutation) SetAnswer(s string) {
	m.answer = &s
}

// Answer returns the value of the "answer" field in the mutation.
func (m *PuzzleMutation) Answer() (r string, exists bool) {
	v := m.answer
	if v == nil {
		return
	}
	return *v, true
}

// OldAnswer returns the old "answer" field's value of the Puzzle entity.
// If the Puzzle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PuzzleMutation) OldAnswer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnswer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnswer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnswer: %w", err)
	}
	return oldValue.Answer, nil
}

// ResetAnswer resets all changes to the "answer" field.
func (m *PuzzleMutation) ResetAnswer() {
	m.answer = nil
}

// SetOrder sets the "order" field.
func (m *PuzzleMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *PuzzleMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the Puzzle entity.
// If the Puzzle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PuzzleMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *PuzzleMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *PuzzleMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *PuzzleMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetAdventureID sets the "adventure" edge to the Adventure entity by id.
func (m *PuzzleMutation) SetAdventureID(id int) {
	m.adventure = &id
}

// ClearAdventure clears the "adventure" edge to the Adventure entity.
func (m *PuzzleMutation) ClearAdventure() {
	m.clearedadventure = true
}

// AdventureCleared reports if the "adventure" edge to the Adventure entity was cleared.
func (m *PuzzleMutation) AdventureCleared() bool {
	return m.clearedadventure
}

// AdventureID returns the "adventure" edge ID in the mutation.
func (m *PuzzleMutation) AdventureID() (id int, exists bool) {
	if m.adventure != nil {
		return *m.adventure, true
	}
	return
}

// AdventureIDs returns the "adventure" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AdventureID instead. It exists only for internal usage by the builders.
func (m *PuzzleMutation) AdventureIDs() (ids []int) {
	if id := m.adventure; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAdventure resets all changes to the "adventure" edge.
func (m *PuzzleMutation) ResetAdventure() {
	m.adventure = nil
	m.clearedadventure = false
}

// Where appends a list predicates to the PuzzleMutation builder.
func (m *PuzzleMutation) Where(ps ...predicate.Puzzle) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PuzzleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Puzzle).
func (m *PuzzleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PuzzleMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.title != nil {
		fields = append(fields, puzzle.FieldTitle)
	}
	if m.answer != nil {
		fields = append(fields, puzzle.FieldAnswer)
	}
	if m._order != nil {
		fields = append(fields, puzzle.FieldOrder)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PuzzleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case puzzle.FieldTitle:
		return m.Title()
	case puzzle.FieldAnswer:
		return m.Answer()
	case puzzle.FieldOrder:
		return m.Order()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PuzzleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case puzzle.FieldTitle:
		return m.OldTitle(ctx)
	case puzzle.FieldAnswer:
		return m.OldAnswer(ctx)
	case puzzle.FieldOrder:
		return m.OldOrder(ctx)
	}
	return nil, fmt.Errorf("unknown Puzzle field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PuzzleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case puzzle.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case puzzle.FieldAnswer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnswer(v)
		return nil
	case puzzle.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Puzzle field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PuzzleMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, puzzle.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PuzzleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case puzzle.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PuzzleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case puzzle.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Puzzle numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PuzzleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PuzzleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PuzzleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Puzzle nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PuzzleMutation) ResetField(name string) error {
	switch name {
	case puzzle.FieldTitle:
		m.ResetTitle()
		return nil
	case puzzle.FieldAnswer:
		m.ResetAnswer()
		return nil
	case puzzle.FieldOrder:
		m.ResetOrder()
		return nil
	}
	return fmt.Errorf("unknown Puzzle field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PuzzleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.adventure != nil {
		edges = append(edges, puzzle.EdgeAdventure)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PuzzleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case puzzle.EdgeAdventure:
		if id := m.adventure; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PuzzleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PuzzleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PuzzleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedadventure {
		edges = append(edges, puzzle.EdgeAdventure)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PuzzleMutation) EdgeCleared(name string) bool {
	switch name {
	case puzzle.EdgeAdventure:
		return m.clearedadventure
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PuzzleMutation) ClearEdge(name string) error {
	switch name {
	case puzzle.EdgeAdventure:
		m.ClearAdventure()
		return nil
	}
	return fmt.Errorf("unknown Puzzle unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PuzzleMutation) ResetEdge(name string) error {
	switch name {
	case puzzle.EdgeAdventure:
		m.ResetAdventure()
		return nil
	}
	return fmt.Errorf("unknown Puzzle edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	verifyCode    *string
	verifyExpiry  *time.Time
	resetCode     *string
	resetExpiry   *time.Time
	email         *string
	passhash      *string
	status        *user.Status
	clearedFields map[string]struct{}
	game          map[int]struct{}
	removedgame   map[int]struct{}
	clearedgame   bool
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetVerifyCode sets the "verifyCode" field.
func (m *UserMutation) SetVerifyCode(s string) {
	m.verifyCode = &s
}

// VerifyCode returns the value of the "verifyCode" field in the mutation.
func (m *UserMutation) VerifyCode() (r string, exists bool) {
	v := m.verifyCode
	if v == nil {
		return
	}
	return *v, true
}

// OldVerifyCode returns the old "verifyCode" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldVerifyCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVerifyCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVerifyCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVerifyCode: %w", err)
	}
	return oldValue.VerifyCode, nil
}

// ResetVerifyCode resets all changes to the "verifyCode" field.
func (m *UserMutation) ResetVerifyCode() {
	m.verifyCode = nil
}

// SetVerifyExpiry sets the "verifyExpiry" field.
func (m *UserMutation) SetVerifyExpiry(t time.Time) {
	m.verifyExpiry = &t
}

// VerifyExpiry returns the value of the "verifyExpiry" field in the mutation.
func (m *UserMutation) VerifyExpiry() (r time.Time, exists bool) {
	v := m.verifyExpiry
	if v == nil {
		return
	}
	return *v, true
}

// OldVerifyExpiry returns the old "verifyExpiry" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldVerifyExpiry(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVerifyExpiry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVerifyExpiry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVerifyExpiry: %w", err)
	}
	return oldValue.VerifyExpiry, nil
}

// ResetVerifyExpiry resets all changes to the "verifyExpiry" field.
func (m *UserMutation) ResetVerifyExpiry() {
	m.verifyExpiry = nil
}

// SetResetCode sets the "resetCode" field.
func (m *UserMutation) SetResetCode(s string) {
	m.resetCode = &s
}

// ResetCode returns the value of the "resetCode" field in the mutation.
func (m *UserMutation) ResetCode() (r string, exists bool) {
	v := m.resetCode
	if v == nil {
		return
	}
	return *v, true
}

// OldResetCode returns the old "resetCode" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldResetCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResetCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResetCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResetCode: %w", err)
	}
	return oldValue.ResetCode, nil
}

// ResetResetCode resets all changes to the "resetCode" field.
func (m *UserMutation) ResetResetCode() {
	m.resetCode = nil
}

// SetResetExpiry sets the "resetExpiry" field.
func (m *UserMutation) SetResetExpiry(t time.Time) {
	m.resetExpiry = &t
}

// ResetExpiry returns the value of the "resetExpiry" field in the mutation.
func (m *UserMutation) ResetExpiry() (r time.Time, exists bool) {
	v := m.resetExpiry
	if v == nil {
		return
	}
	return *v, true
}

// OldResetExpiry returns the old "resetExpiry" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldResetExpiry(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResetExpiry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResetExpiry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResetExpiry: %w", err)
	}
	return oldValue.ResetExpiry, nil
}

// ResetResetExpiry resets all changes to the "resetExpiry" field.
func (m *UserMutation) ResetResetExpiry() {
	m.resetExpiry = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPasshash sets the "passhash" field.
func (m *UserMutation) SetPasshash(s string) {
	m.passhash = &s
}

// Passhash returns the value of the "passhash" field in the mutation.
func (m *UserMutation) Passhash() (r string, exists bool) {
	v := m.passhash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasshash returns the old "passhash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasshash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasshash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasshash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasshash: %w", err)
	}
	return oldValue.Passhash, nil
}

// ResetPasshash resets all changes to the "passhash" field.
func (m *UserMutation) ResetPasshash() {
	m.passhash = nil
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(u user.Status) {
	m.status = &u
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r user.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v user.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
}

// AddGameIDs adds the "game" edge to the Game entity by ids.
func (m *UserMutation) AddGameIDs(ids ...int) {
	if m.game == nil {
		m.game = make(map[int]struct{})
	}
	for i := range ids {
		m.game[ids[i]] = struct{}{}
	}
}

// ClearGame clears the "game" edge to the Game entity.
func (m *UserMutation) ClearGame() {
	m.clearedgame = true
}

// GameCleared reports if the "game" edge to the Game entity was cleared.
func (m *UserMutation) GameCleared() bool {
	return m.clearedgame
}

// RemoveGameIDs removes the "game" edge to the Game entity by IDs.
func (m *UserMutation) RemoveGameIDs(ids ...int) {
	if m.removedgame == nil {
		m.removedgame = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.game, ids[i])
		m.removedgame[ids[i]] = struct{}{}
	}
}

// RemovedGame returns the removed IDs of the "game" edge to the Game entity.
func (m *UserMutation) RemovedGameIDs() (ids []int) {
	for id := range m.removedgame {
		ids = append(ids, id)
	}
	return
}

// GameIDs returns the "game" edge IDs in the mutation.
func (m *UserMutation) GameIDs() (ids []int) {
	for id := range m.game {
		ids = append(ids, id)
	}
	return
}

// ResetGame resets all changes to the "game" edge.
func (m *UserMutation) ResetGame() {
	m.game = nil
	m.clearedgame = false
	m.removedgame = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.verifyCode != nil {
		fields = append(fields, user.FieldVerifyCode)
	}
	if m.verifyExpiry != nil {
		fields = append(fields, user.FieldVerifyExpiry)
	}
	if m.resetCode != nil {
		fields = append(fields, user.FieldResetCode)
	}
	if m.resetExpiry != nil {
		fields = append(fields, user.FieldResetExpiry)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.passhash != nil {
		fields = append(fields, user.FieldPasshash)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldVerifyCode:
		return m.VerifyCode()
	case user.FieldVerifyExpiry:
		return m.VerifyExpiry()
	case user.FieldResetCode:
		return m.ResetCode()
	case user.FieldResetExpiry:
		return m.ResetExpiry()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPasshash:
		return m.Passhash()
	case user.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldVerifyCode:
		return m.OldVerifyCode(ctx)
	case user.FieldVerifyExpiry:
		return m.OldVerifyExpiry(ctx)
	case user.FieldResetCode:
		return m.OldResetCode(ctx)
	case user.FieldResetExpiry:
		return m.OldResetExpiry(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPasshash:
		return m.OldPasshash(ctx)
	case user.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldVerifyCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVerifyCode(v)
		return nil
	case user.FieldVerifyExpiry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVerifyExpiry(v)
		return nil
	case user.FieldResetCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResetCode(v)
		return nil
	case user.FieldResetExpiry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResetExpiry(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPasshash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasshash(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(user.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldVerifyCode:
		m.ResetVerifyCode()
		return nil
	case user.FieldVerifyExpiry:
		m.ResetVerifyExpiry()
		return nil
	case user.FieldResetCode:
		m.ResetResetCode()
		return nil
	case user.FieldResetExpiry:
		m.ResetResetExpiry()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPasshash:
		m.ResetPasshash()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.game != nil {
		edges = append(edges, user.EdgeGame)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeGame:
		ids := make([]ent.Value, 0, len(m.game))
		for id := range m.game {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedgame != nil {
		edges = append(edges, user.EdgeGame)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeGame:
		ids := make([]ent.Value, 0, len(m.removedgame))
		for id := range m.removedgame {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgame {
		edges = append(edges, user.EdgeGame)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeGame:
		return m.clearedgame
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeGame:
		m.ResetGame()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
