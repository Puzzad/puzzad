// Code generated by ent, DO NOT EDIT.

package guess

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/greboid/puzzad/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// Submitted applies equality check predicate on the "submitted" field. It's identical to SubmittedEQ.
func Submitted(v time.Time) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubmitted), v))
	})
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContent), v))
	})
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Guess {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContent), v...))
	})
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Guess {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContent), v...))
	})
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContent), v))
	})
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContent), v))
	})
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContent), v))
	})
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContent), v))
	})
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContent), v))
	})
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContent), v))
	})
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContent), v))
	})
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContent), v))
	})
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContent), v))
	})
}

// SubmittedEQ applies the EQ predicate on the "submitted" field.
func SubmittedEQ(v time.Time) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubmitted), v))
	})
}

// SubmittedNEQ applies the NEQ predicate on the "submitted" field.
func SubmittedNEQ(v time.Time) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubmitted), v))
	})
}

// SubmittedIn applies the In predicate on the "submitted" field.
func SubmittedIn(vs ...time.Time) predicate.Guess {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSubmitted), v...))
	})
}

// SubmittedNotIn applies the NotIn predicate on the "submitted" field.
func SubmittedNotIn(vs ...time.Time) predicate.Guess {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSubmitted), v...))
	})
}

// SubmittedGT applies the GT predicate on the "submitted" field.
func SubmittedGT(v time.Time) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubmitted), v))
	})
}

// SubmittedGTE applies the GTE predicate on the "submitted" field.
func SubmittedGTE(v time.Time) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubmitted), v))
	})
}

// SubmittedLT applies the LT predicate on the "submitted" field.
func SubmittedLT(v time.Time) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubmitted), v))
	})
}

// SubmittedLTE applies the LTE predicate on the "submitted" field.
func SubmittedLTE(v time.Time) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubmitted), v))
	})
}

// HasQuestion applies the HasEdge predicate on the "question" edge.
func HasQuestion() predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionWith applies the HasEdge predicate on the "question" edge with a given conditions (other predicates).
func HasQuestionWith(preds ...predicate.Question) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Guess) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Guess) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Guess) predicate.Guess {
	return predicate.Guess(func(s *sql.Selector) {
		p(s.Not())
	})
}
