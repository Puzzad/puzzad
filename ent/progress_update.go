// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/greboid/puzzad/ent/adventure"
	"github.com/greboid/puzzad/ent/predicate"
	"github.com/greboid/puzzad/ent/progress"
	"github.com/greboid/puzzad/ent/question"
)

// ProgressUpdate is the builder for updating Progress entities.
type ProgressUpdate struct {
	config
	hooks    []Hook
	mutation *ProgressMutation
}

// Where appends a list predicates to the ProgressUpdate builder.
func (pu *ProgressUpdate) Where(ps ...predicate.Progress) *ProgressUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetAdventureID sets the "adventure" edge to the Adventure entity by ID.
func (pu *ProgressUpdate) SetAdventureID(id int) *ProgressUpdate {
	pu.mutation.SetAdventureID(id)
	return pu
}

// SetNillableAdventureID sets the "adventure" edge to the Adventure entity by ID if the given value is not nil.
func (pu *ProgressUpdate) SetNillableAdventureID(id *int) *ProgressUpdate {
	if id != nil {
		pu = pu.SetAdventureID(*id)
	}
	return pu
}

// SetAdventure sets the "adventure" edge to the Adventure entity.
func (pu *ProgressUpdate) SetAdventure(a *Adventure) *ProgressUpdate {
	return pu.SetAdventureID(a.ID)
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (pu *ProgressUpdate) SetQuestionID(id int) *ProgressUpdate {
	pu.mutation.SetQuestionID(id)
	return pu
}

// SetNillableQuestionID sets the "question" edge to the Question entity by ID if the given value is not nil.
func (pu *ProgressUpdate) SetNillableQuestionID(id *int) *ProgressUpdate {
	if id != nil {
		pu = pu.SetQuestionID(*id)
	}
	return pu
}

// SetQuestion sets the "question" edge to the Question entity.
func (pu *ProgressUpdate) SetQuestion(q *Question) *ProgressUpdate {
	return pu.SetQuestionID(q.ID)
}

// Mutation returns the ProgressMutation object of the builder.
func (pu *ProgressUpdate) Mutation() *ProgressMutation {
	return pu.mutation
}

// ClearAdventure clears the "adventure" edge to the Adventure entity.
func (pu *ProgressUpdate) ClearAdventure() *ProgressUpdate {
	pu.mutation.ClearAdventure()
	return pu
}

// ClearQuestion clears the "question" edge to the Question entity.
func (pu *ProgressUpdate) ClearQuestion() *ProgressUpdate {
	pu.mutation.ClearQuestion()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProgressUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProgressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProgressUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProgressUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProgressUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProgressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   progress.Table,
			Columns: progress.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: progress.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pu.mutation.AdventureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   progress.AdventureTable,
			Columns: []string{progress.AdventureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adventure.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AdventureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   progress.AdventureTable,
			Columns: []string{progress.AdventureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adventure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   progress.QuestionTable,
			Columns: []string{progress.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   progress.QuestionTable,
			Columns: []string{progress.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{progress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ProgressUpdateOne is the builder for updating a single Progress entity.
type ProgressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProgressMutation
}

// SetAdventureID sets the "adventure" edge to the Adventure entity by ID.
func (puo *ProgressUpdateOne) SetAdventureID(id int) *ProgressUpdateOne {
	puo.mutation.SetAdventureID(id)
	return puo
}

// SetNillableAdventureID sets the "adventure" edge to the Adventure entity by ID if the given value is not nil.
func (puo *ProgressUpdateOne) SetNillableAdventureID(id *int) *ProgressUpdateOne {
	if id != nil {
		puo = puo.SetAdventureID(*id)
	}
	return puo
}

// SetAdventure sets the "adventure" edge to the Adventure entity.
func (puo *ProgressUpdateOne) SetAdventure(a *Adventure) *ProgressUpdateOne {
	return puo.SetAdventureID(a.ID)
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (puo *ProgressUpdateOne) SetQuestionID(id int) *ProgressUpdateOne {
	puo.mutation.SetQuestionID(id)
	return puo
}

// SetNillableQuestionID sets the "question" edge to the Question entity by ID if the given value is not nil.
func (puo *ProgressUpdateOne) SetNillableQuestionID(id *int) *ProgressUpdateOne {
	if id != nil {
		puo = puo.SetQuestionID(*id)
	}
	return puo
}

// SetQuestion sets the "question" edge to the Question entity.
func (puo *ProgressUpdateOne) SetQuestion(q *Question) *ProgressUpdateOne {
	return puo.SetQuestionID(q.ID)
}

// Mutation returns the ProgressMutation object of the builder.
func (puo *ProgressUpdateOne) Mutation() *ProgressMutation {
	return puo.mutation
}

// ClearAdventure clears the "adventure" edge to the Adventure entity.
func (puo *ProgressUpdateOne) ClearAdventure() *ProgressUpdateOne {
	puo.mutation.ClearAdventure()
	return puo
}

// ClearQuestion clears the "question" edge to the Question entity.
func (puo *ProgressUpdateOne) ClearQuestion() *ProgressUpdateOne {
	puo.mutation.ClearQuestion()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProgressUpdateOne) Select(field string, fields ...string) *ProgressUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Progress entity.
func (puo *ProgressUpdateOne) Save(ctx context.Context) (*Progress, error) {
	var (
		err  error
		node *Progress
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProgressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Progress)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProgressMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProgressUpdateOne) SaveX(ctx context.Context) *Progress {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProgressUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProgressUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProgressUpdateOne) sqlSave(ctx context.Context) (_node *Progress, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   progress.Table,
			Columns: progress.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: progress.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Progress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, progress.FieldID)
		for _, f := range fields {
			if !progress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != progress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if puo.mutation.AdventureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   progress.AdventureTable,
			Columns: []string{progress.AdventureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adventure.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AdventureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   progress.AdventureTable,
			Columns: []string{progress.AdventureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adventure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   progress.QuestionTable,
			Columns: []string{progress.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   progress.QuestionTable,
			Columns: []string{progress.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Progress{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{progress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
