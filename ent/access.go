// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/greboid/puzzad/ent/access"
	"github.com/greboid/puzzad/ent/adventure"
)

// Access is the model entity for the Access schema.
type Access struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status access.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccessQuery when eager-loading is set.
	Edges            AccessEdges `json:"edges"`
	access_adventure *int
	team_access      *int
}

// AccessEdges holds the relations/edges for other nodes in the graph.
type AccessEdges struct {
	// Adventure holds the value of the adventure edge.
	Adventure *Adventure `json:"adventure,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AdventureOrErr returns the Adventure value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccessEdges) AdventureOrErr() (*Adventure, error) {
	if e.loadedTypes[0] {
		if e.Adventure == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: adventure.Label}
		}
		return e.Adventure, nil
	}
	return nil, &NotLoadedError{edge: "adventure"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Access) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case access.FieldID:
			values[i] = new(sql.NullInt64)
		case access.FieldStatus:
			values[i] = new(sql.NullString)
		case access.ForeignKeys[0]: // access_adventure
			values[i] = new(sql.NullInt64)
		case access.ForeignKeys[1]: // team_access
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Access", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Access fields.
func (a *Access) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case access.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case access.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = access.Status(value.String)
			}
		case access.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field access_adventure", value)
			} else if value.Valid {
				a.access_adventure = new(int)
				*a.access_adventure = int(value.Int64)
			}
		case access.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_access", value)
			} else if value.Valid {
				a.team_access = new(int)
				*a.team_access = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAdventure queries the "adventure" edge of the Access entity.
func (a *Access) QueryAdventure() *AdventureQuery {
	return (&AccessClient{config: a.config}).QueryAdventure(a)
}

// Update returns a builder for updating this Access.
// Note that you need to call Access.Unwrap() before calling this method if this Access
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Access) Update() *AccessUpdateOne {
	return (&AccessClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Access entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Access) Unwrap() *Access {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Access is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Access) String() string {
	var builder strings.Builder
	builder.WriteString("Access(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Accesses is a parsable slice of Access.
type Accesses []*Access

func (a Accesses) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
