// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/greboid/puzzad/ent/access"
	"github.com/greboid/puzzad/ent/adventure"
	"github.com/greboid/puzzad/ent/guess"
	"github.com/greboid/puzzad/ent/predicate"
	"github.com/greboid/puzzad/ent/progress"
	"github.com/greboid/puzzad/ent/question"
	"github.com/greboid/puzzad/ent/team"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccess    = "Access"
	TypeAdventure = "Adventure"
	TypeGuess     = "Guess"
	TypeProgress  = "Progress"
	TypeQuestion  = "Question"
	TypeTeam      = "Team"
)

// AccessMutation represents an operation that mutates the Access nodes in the graph.
type AccessMutation struct {
	config
	op                Op
	typ               string
	status            *access.Status
	clearedFields     map[string]struct{}
	team              *int
	clearedteam       bool
	adventures        *int
	clearedadventures bool
	done              bool
	oldValue          func(context.Context) (*Access, error)
	predicates        []predicate.Access
}

var _ ent.Mutation = (*AccessMutation)(nil)

// accessOption allows management of the mutation configuration using functional options.
type accessOption func(*AccessMutation)

// newAccessMutation creates new mutation for the Access entity.
func newAccessMutation(c config, op Op, opts ...accessOption) *AccessMutation {
	m := &AccessMutation{
		config:        c,
		op:            op,
		typ:           TypeAccess,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccessMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccessMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetStatus sets the "status" field.
func (m *AccessMutation) SetStatus(a access.Status) {
	m.status = &a
}

// Status returns the value of the "status" field in the mutation.
func (m *AccessMutation) Status() (r access.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *AccessMutation) ResetStatus() {
	m.status = nil
}

// SetTeamID sets the "team_id" field.
func (m *AccessMutation) SetTeamID(i int) {
	m.team = &i
}

// TeamID returns the value of the "team_id" field in the mutation.
func (m *AccessMutation) TeamID() (r int, exists bool) {
	v := m.team
	if v == nil {
		return
	}
	return *v, true
}

// ResetTeamID resets all changes to the "team_id" field.
func (m *AccessMutation) ResetTeamID() {
	m.team = nil
}

// SetAdventureID sets the "adventure_id" field.
func (m *AccessMutation) SetAdventureID(i int) {
	m.adventures = &i
}

// AdventureID returns the value of the "adventure_id" field in the mutation.
func (m *AccessMutation) AdventureID() (r int, exists bool) {
	v := m.adventures
	if v == nil {
		return
	}
	return *v, true
}

// ResetAdventureID resets all changes to the "adventure_id" field.
func (m *AccessMutation) ResetAdventureID() {
	m.adventures = nil
}

// ClearTeam clears the "team" edge to the Team entity.
func (m *AccessMutation) ClearTeam() {
	m.clearedteam = true
}

// TeamCleared reports if the "team" edge to the Team entity was cleared.
func (m *AccessMutation) TeamCleared() bool {
	return m.clearedteam
}

// TeamIDs returns the "team" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TeamID instead. It exists only for internal usage by the builders.
func (m *AccessMutation) TeamIDs() (ids []int) {
	if id := m.team; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTeam resets all changes to the "team" edge.
func (m *AccessMutation) ResetTeam() {
	m.team = nil
	m.clearedteam = false
}

// SetAdventuresID sets the "adventures" edge to the Adventure entity by id.
func (m *AccessMutation) SetAdventuresID(id int) {
	m.adventures = &id
}

// ClearAdventures clears the "adventures" edge to the Adventure entity.
func (m *AccessMutation) ClearAdventures() {
	m.clearedadventures = true
}

// AdventuresCleared reports if the "adventures" edge to the Adventure entity was cleared.
func (m *AccessMutation) AdventuresCleared() bool {
	return m.clearedadventures
}

// AdventuresID returns the "adventures" edge ID in the mutation.
func (m *AccessMutation) AdventuresID() (id int, exists bool) {
	if m.adventures != nil {
		return *m.adventures, true
	}
	return
}

// AdventuresIDs returns the "adventures" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AdventuresID instead. It exists only for internal usage by the builders.
func (m *AccessMutation) AdventuresIDs() (ids []int) {
	if id := m.adventures; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAdventures resets all changes to the "adventures" edge.
func (m *AccessMutation) ResetAdventures() {
	m.adventures = nil
	m.clearedadventures = false
}

// Where appends a list predicates to the AccessMutation builder.
func (m *AccessMutation) Where(ps ...predicate.Access) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AccessMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Access).
func (m *AccessMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccessMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.status != nil {
		fields = append(fields, access.FieldStatus)
	}
	if m.team != nil {
		fields = append(fields, access.FieldTeamID)
	}
	if m.adventures != nil {
		fields = append(fields, access.FieldAdventureID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccessMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case access.FieldStatus:
		return m.Status()
	case access.FieldTeamID:
		return m.TeamID()
	case access.FieldAdventureID:
		return m.AdventureID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccessMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema Access does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccessMutation) SetField(name string, value ent.Value) error {
	switch name {
	case access.FieldStatus:
		v, ok := value.(access.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case access.FieldTeamID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTeamID(v)
		return nil
	case access.FieldAdventureID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdventureID(v)
		return nil
	}
	return fmt.Errorf("unknown Access field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccessMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccessMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccessMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Access numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccessMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccessMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccessMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Access nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccessMutation) ResetField(name string) error {
	switch name {
	case access.FieldStatus:
		m.ResetStatus()
		return nil
	case access.FieldTeamID:
		m.ResetTeamID()
		return nil
	case access.FieldAdventureID:
		m.ResetAdventureID()
		return nil
	}
	return fmt.Errorf("unknown Access field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccessMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.team != nil {
		edges = append(edges, access.EdgeTeam)
	}
	if m.adventures != nil {
		edges = append(edges, access.EdgeAdventures)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccessMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case access.EdgeTeam:
		if id := m.team; id != nil {
			return []ent.Value{*id}
		}
	case access.EdgeAdventures:
		if id := m.adventures; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccessMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccessMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccessMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedteam {
		edges = append(edges, access.EdgeTeam)
	}
	if m.clearedadventures {
		edges = append(edges, access.EdgeAdventures)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccessMutation) EdgeCleared(name string) bool {
	switch name {
	case access.EdgeTeam:
		return m.clearedteam
	case access.EdgeAdventures:
		return m.clearedadventures
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccessMutation) ClearEdge(name string) error {
	switch name {
	case access.EdgeTeam:
		m.ClearTeam()
		return nil
	case access.EdgeAdventures:
		m.ClearAdventures()
		return nil
	}
	return fmt.Errorf("unknown Access unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccessMutation) ResetEdge(name string) error {
	switch name {
	case access.EdgeTeam:
		m.ResetTeam()
		return nil
	case access.EdgeAdventures:
		m.ResetAdventures()
		return nil
	}
	return fmt.Errorf("unknown Access edge %s", name)
}

// AdventureMutation represents an operation that mutates the Adventure nodes in the graph.
type AdventureMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	clearedFields    map[string]struct{}
	team             map[int]struct{}
	removedteam      map[int]struct{}
	clearedteam      bool
	questions        map[int]struct{}
	removedquestions map[int]struct{}
	clearedquestions bool
	done             bool
	oldValue         func(context.Context) (*Adventure, error)
	predicates       []predicate.Adventure
}

var _ ent.Mutation = (*AdventureMutation)(nil)

// adventureOption allows management of the mutation configuration using functional options.
type adventureOption func(*AdventureMutation)

// newAdventureMutation creates new mutation for the Adventure entity.
func newAdventureMutation(c config, op Op, opts ...adventureOption) *AdventureMutation {
	m := &AdventureMutation{
		config:        c,
		op:            op,
		typ:           TypeAdventure,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdventureID sets the ID field of the mutation.
func withAdventureID(id int) adventureOption {
	return func(m *AdventureMutation) {
		var (
			err   error
			once  sync.Once
			value *Adventure
		)
		m.oldValue = func(ctx context.Context) (*Adventure, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Adventure.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdventure sets the old Adventure of the mutation.
func withAdventure(node *Adventure) adventureOption {
	return func(m *AdventureMutation) {
		m.oldValue = func(context.Context) (*Adventure, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdventureMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdventureMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdventureMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdventureMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Adventure.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AdventureMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AdventureMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Adventure entity.
// If the Adventure object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdventureMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AdventureMutation) ResetName() {
	m.name = nil
}

// AddTeamIDs adds the "team" edge to the Team entity by ids.
func (m *AdventureMutation) AddTeamIDs(ids ...int) {
	if m.team == nil {
		m.team = make(map[int]struct{})
	}
	for i := range ids {
		m.team[ids[i]] = struct{}{}
	}
}

// ClearTeam clears the "team" edge to the Team entity.
func (m *AdventureMutation) ClearTeam() {
	m.clearedteam = true
}

// TeamCleared reports if the "team" edge to the Team entity was cleared.
func (m *AdventureMutation) TeamCleared() bool {
	return m.clearedteam
}

// RemoveTeamIDs removes the "team" edge to the Team entity by IDs.
func (m *AdventureMutation) RemoveTeamIDs(ids ...int) {
	if m.removedteam == nil {
		m.removedteam = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.team, ids[i])
		m.removedteam[ids[i]] = struct{}{}
	}
}

// RemovedTeam returns the removed IDs of the "team" edge to the Team entity.
func (m *AdventureMutation) RemovedTeamIDs() (ids []int) {
	for id := range m.removedteam {
		ids = append(ids, id)
	}
	return
}

// TeamIDs returns the "team" edge IDs in the mutation.
func (m *AdventureMutation) TeamIDs() (ids []int) {
	for id := range m.team {
		ids = append(ids, id)
	}
	return
}

// ResetTeam resets all changes to the "team" edge.
func (m *AdventureMutation) ResetTeam() {
	m.team = nil
	m.clearedteam = false
	m.removedteam = nil
}

// AddQuestionIDs adds the "questions" edge to the Question entity by ids.
func (m *AdventureMutation) AddQuestionIDs(ids ...int) {
	if m.questions == nil {
		m.questions = make(map[int]struct{})
	}
	for i := range ids {
		m.questions[ids[i]] = struct{}{}
	}
}

// ClearQuestions clears the "questions" edge to the Question entity.
func (m *AdventureMutation) ClearQuestions() {
	m.clearedquestions = true
}

// QuestionsCleared reports if the "questions" edge to the Question entity was cleared.
func (m *AdventureMutation) QuestionsCleared() bool {
	return m.clearedquestions
}

// RemoveQuestionIDs removes the "questions" edge to the Question entity by IDs.
func (m *AdventureMutation) RemoveQuestionIDs(ids ...int) {
	if m.removedquestions == nil {
		m.removedquestions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.questions, ids[i])
		m.removedquestions[ids[i]] = struct{}{}
	}
}

// RemovedQuestions returns the removed IDs of the "questions" edge to the Question entity.
func (m *AdventureMutation) RemovedQuestionsIDs() (ids []int) {
	for id := range m.removedquestions {
		ids = append(ids, id)
	}
	return
}

// QuestionsIDs returns the "questions" edge IDs in the mutation.
func (m *AdventureMutation) QuestionsIDs() (ids []int) {
	for id := range m.questions {
		ids = append(ids, id)
	}
	return
}

// ResetQuestions resets all changes to the "questions" edge.
func (m *AdventureMutation) ResetQuestions() {
	m.questions = nil
	m.clearedquestions = false
	m.removedquestions = nil
}

// Where appends a list predicates to the AdventureMutation builder.
func (m *AdventureMutation) Where(ps ...predicate.Adventure) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AdventureMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Adventure).
func (m *AdventureMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdventureMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, adventure.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdventureMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adventure.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdventureMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adventure.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Adventure field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdventureMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adventure.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Adventure field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdventureMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdventureMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdventureMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Adventure numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdventureMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdventureMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdventureMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Adventure nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdventureMutation) ResetField(name string) error {
	switch name {
	case adventure.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Adventure field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdventureMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.team != nil {
		edges = append(edges, adventure.EdgeTeam)
	}
	if m.questions != nil {
		edges = append(edges, adventure.EdgeQuestions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdventureMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case adventure.EdgeTeam:
		ids := make([]ent.Value, 0, len(m.team))
		for id := range m.team {
			ids = append(ids, id)
		}
		return ids
	case adventure.EdgeQuestions:
		ids := make([]ent.Value, 0, len(m.questions))
		for id := range m.questions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdventureMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedteam != nil {
		edges = append(edges, adventure.EdgeTeam)
	}
	if m.removedquestions != nil {
		edges = append(edges, adventure.EdgeQuestions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdventureMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case adventure.EdgeTeam:
		ids := make([]ent.Value, 0, len(m.removedteam))
		for id := range m.removedteam {
			ids = append(ids, id)
		}
		return ids
	case adventure.EdgeQuestions:
		ids := make([]ent.Value, 0, len(m.removedquestions))
		for id := range m.removedquestions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdventureMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedteam {
		edges = append(edges, adventure.EdgeTeam)
	}
	if m.clearedquestions {
		edges = append(edges, adventure.EdgeQuestions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdventureMutation) EdgeCleared(name string) bool {
	switch name {
	case adventure.EdgeTeam:
		return m.clearedteam
	case adventure.EdgeQuestions:
		return m.clearedquestions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdventureMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Adventure unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdventureMutation) ResetEdge(name string) error {
	switch name {
	case adventure.EdgeTeam:
		m.ResetTeam()
		return nil
	case adventure.EdgeQuestions:
		m.ResetQuestions()
		return nil
	}
	return fmt.Errorf("unknown Adventure edge %s", name)
}

// GuessMutation represents an operation that mutates the Guess nodes in the graph.
type GuessMutation struct {
	config
	op              Op
	typ             string
	id              *int
	create_time     *time.Time
	content         *string
	submitted       *time.Time
	clearedFields   map[string]struct{}
	question        map[int]struct{}
	removedquestion map[int]struct{}
	clearedquestion bool
	team            map[int]struct{}
	removedteam     map[int]struct{}
	clearedteam     bool
	done            bool
	oldValue        func(context.Context) (*Guess, error)
	predicates      []predicate.Guess
}

var _ ent.Mutation = (*GuessMutation)(nil)

// guessOption allows management of the mutation configuration using functional options.
type guessOption func(*GuessMutation)

// newGuessMutation creates new mutation for the Guess entity.
func newGuessMutation(c config, op Op, opts ...guessOption) *GuessMutation {
	m := &GuessMutation{
		config:        c,
		op:            op,
		typ:           TypeGuess,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGuessID sets the ID field of the mutation.
func withGuessID(id int) guessOption {
	return func(m *GuessMutation) {
		var (
			err   error
			once  sync.Once
			value *Guess
		)
		m.oldValue = func(ctx context.Context) (*Guess, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Guess.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGuess sets the old Guess of the mutation.
func withGuess(node *Guess) guessOption {
	return func(m *GuessMutation) {
		m.oldValue = func(context.Context) (*Guess, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GuessMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GuessMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GuessMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GuessMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Guess.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *GuessMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *GuessMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Guess entity.
// If the Guess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuessMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *GuessMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetContent sets the "content" field.
func (m *GuessMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *GuessMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Guess entity.
// If the Guess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuessMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *GuessMutation) ResetContent() {
	m.content = nil
}

// SetSubmitted sets the "submitted" field.
func (m *GuessMutation) SetSubmitted(t time.Time) {
	m.submitted = &t
}

// Submitted returns the value of the "submitted" field in the mutation.
func (m *GuessMutation) Submitted() (r time.Time, exists bool) {
	v := m.submitted
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmitted returns the old "submitted" field's value of the Guess entity.
// If the Guess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuessMutation) OldSubmitted(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmitted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmitted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmitted: %w", err)
	}
	return oldValue.Submitted, nil
}

// ResetSubmitted resets all changes to the "submitted" field.
func (m *GuessMutation) ResetSubmitted() {
	m.submitted = nil
}

// AddQuestionIDs adds the "question" edge to the Question entity by ids.
func (m *GuessMutation) AddQuestionIDs(ids ...int) {
	if m.question == nil {
		m.question = make(map[int]struct{})
	}
	for i := range ids {
		m.question[ids[i]] = struct{}{}
	}
}

// ClearQuestion clears the "question" edge to the Question entity.
func (m *GuessMutation) ClearQuestion() {
	m.clearedquestion = true
}

// QuestionCleared reports if the "question" edge to the Question entity was cleared.
func (m *GuessMutation) QuestionCleared() bool {
	return m.clearedquestion
}

// RemoveQuestionIDs removes the "question" edge to the Question entity by IDs.
func (m *GuessMutation) RemoveQuestionIDs(ids ...int) {
	if m.removedquestion == nil {
		m.removedquestion = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.question, ids[i])
		m.removedquestion[ids[i]] = struct{}{}
	}
}

// RemovedQuestion returns the removed IDs of the "question" edge to the Question entity.
func (m *GuessMutation) RemovedQuestionIDs() (ids []int) {
	for id := range m.removedquestion {
		ids = append(ids, id)
	}
	return
}

// QuestionIDs returns the "question" edge IDs in the mutation.
func (m *GuessMutation) QuestionIDs() (ids []int) {
	for id := range m.question {
		ids = append(ids, id)
	}
	return
}

// ResetQuestion resets all changes to the "question" edge.
func (m *GuessMutation) ResetQuestion() {
	m.question = nil
	m.clearedquestion = false
	m.removedquestion = nil
}

// AddTeamIDs adds the "team" edge to the Team entity by ids.
func (m *GuessMutation) AddTeamIDs(ids ...int) {
	if m.team == nil {
		m.team = make(map[int]struct{})
	}
	for i := range ids {
		m.team[ids[i]] = struct{}{}
	}
}

// ClearTeam clears the "team" edge to the Team entity.
func (m *GuessMutation) ClearTeam() {
	m.clearedteam = true
}

// TeamCleared reports if the "team" edge to the Team entity was cleared.
func (m *GuessMutation) TeamCleared() bool {
	return m.clearedteam
}

// RemoveTeamIDs removes the "team" edge to the Team entity by IDs.
func (m *GuessMutation) RemoveTeamIDs(ids ...int) {
	if m.removedteam == nil {
		m.removedteam = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.team, ids[i])
		m.removedteam[ids[i]] = struct{}{}
	}
}

// RemovedTeam returns the removed IDs of the "team" edge to the Team entity.
func (m *GuessMutation) RemovedTeamIDs() (ids []int) {
	for id := range m.removedteam {
		ids = append(ids, id)
	}
	return
}

// TeamIDs returns the "team" edge IDs in the mutation.
func (m *GuessMutation) TeamIDs() (ids []int) {
	for id := range m.team {
		ids = append(ids, id)
	}
	return
}

// ResetTeam resets all changes to the "team" edge.
func (m *GuessMutation) ResetTeam() {
	m.team = nil
	m.clearedteam = false
	m.removedteam = nil
}

// Where appends a list predicates to the GuessMutation builder.
func (m *GuessMutation) Where(ps ...predicate.Guess) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GuessMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Guess).
func (m *GuessMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GuessMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, guess.FieldCreateTime)
	}
	if m.content != nil {
		fields = append(fields, guess.FieldContent)
	}
	if m.submitted != nil {
		fields = append(fields, guess.FieldSubmitted)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GuessMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case guess.FieldCreateTime:
		return m.CreateTime()
	case guess.FieldContent:
		return m.Content()
	case guess.FieldSubmitted:
		return m.Submitted()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GuessMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case guess.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case guess.FieldContent:
		return m.OldContent(ctx)
	case guess.FieldSubmitted:
		return m.OldSubmitted(ctx)
	}
	return nil, fmt.Errorf("unknown Guess field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuessMutation) SetField(name string, value ent.Value) error {
	switch name {
	case guess.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case guess.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case guess.FieldSubmitted:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmitted(v)
		return nil
	}
	return fmt.Errorf("unknown Guess field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GuessMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GuessMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuessMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Guess numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GuessMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GuessMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GuessMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Guess nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GuessMutation) ResetField(name string) error {
	switch name {
	case guess.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case guess.FieldContent:
		m.ResetContent()
		return nil
	case guess.FieldSubmitted:
		m.ResetSubmitted()
		return nil
	}
	return fmt.Errorf("unknown Guess field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GuessMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.question != nil {
		edges = append(edges, guess.EdgeQuestion)
	}
	if m.team != nil {
		edges = append(edges, guess.EdgeTeam)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GuessMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case guess.EdgeQuestion:
		ids := make([]ent.Value, 0, len(m.question))
		for id := range m.question {
			ids = append(ids, id)
		}
		return ids
	case guess.EdgeTeam:
		ids := make([]ent.Value, 0, len(m.team))
		for id := range m.team {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GuessMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedquestion != nil {
		edges = append(edges, guess.EdgeQuestion)
	}
	if m.removedteam != nil {
		edges = append(edges, guess.EdgeTeam)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GuessMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case guess.EdgeQuestion:
		ids := make([]ent.Value, 0, len(m.removedquestion))
		for id := range m.removedquestion {
			ids = append(ids, id)
		}
		return ids
	case guess.EdgeTeam:
		ids := make([]ent.Value, 0, len(m.removedteam))
		for id := range m.removedteam {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GuessMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedquestion {
		edges = append(edges, guess.EdgeQuestion)
	}
	if m.clearedteam {
		edges = append(edges, guess.EdgeTeam)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GuessMutation) EdgeCleared(name string) bool {
	switch name {
	case guess.EdgeQuestion:
		return m.clearedquestion
	case guess.EdgeTeam:
		return m.clearedteam
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GuessMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Guess unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GuessMutation) ResetEdge(name string) error {
	switch name {
	case guess.EdgeQuestion:
		m.ResetQuestion()
		return nil
	case guess.EdgeTeam:
		m.ResetTeam()
		return nil
	}
	return fmt.Errorf("unknown Guess edge %s", name)
}

// ProgressMutation represents an operation that mutates the Progress nodes in the graph.
type ProgressMutation struct {
	config
	op               Op
	typ              string
	id               *int
	clearedFields    map[string]struct{}
	team             map[int]struct{}
	removedteam      map[int]struct{}
	clearedteam      bool
	adventure        *int
	clearedadventure bool
	question         *int
	clearedquestion  bool
	done             bool
	oldValue         func(context.Context) (*Progress, error)
	predicates       []predicate.Progress
}

var _ ent.Mutation = (*ProgressMutation)(nil)

// progressOption allows management of the mutation configuration using functional options.
type progressOption func(*ProgressMutation)

// newProgressMutation creates new mutation for the Progress entity.
func newProgressMutation(c config, op Op, opts ...progressOption) *ProgressMutation {
	m := &ProgressMutation{
		config:        c,
		op:            op,
		typ:           TypeProgress,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProgressID sets the ID field of the mutation.
func withProgressID(id int) progressOption {
	return func(m *ProgressMutation) {
		var (
			err   error
			once  sync.Once
			value *Progress
		)
		m.oldValue = func(ctx context.Context) (*Progress, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Progress.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProgress sets the old Progress of the mutation.
func withProgress(node *Progress) progressOption {
	return func(m *ProgressMutation) {
		m.oldValue = func(context.Context) (*Progress, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProgressMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProgressMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProgressMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProgressMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Progress.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// AddTeamIDs adds the "team" edge to the Team entity by ids.
func (m *ProgressMutation) AddTeamIDs(ids ...int) {
	if m.team == nil {
		m.team = make(map[int]struct{})
	}
	for i := range ids {
		m.team[ids[i]] = struct{}{}
	}
}

// ClearTeam clears the "team" edge to the Team entity.
func (m *ProgressMutation) ClearTeam() {
	m.clearedteam = true
}

// TeamCleared reports if the "team" edge to the Team entity was cleared.
func (m *ProgressMutation) TeamCleared() bool {
	return m.clearedteam
}

// RemoveTeamIDs removes the "team" edge to the Team entity by IDs.
func (m *ProgressMutation) RemoveTeamIDs(ids ...int) {
	if m.removedteam == nil {
		m.removedteam = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.team, ids[i])
		m.removedteam[ids[i]] = struct{}{}
	}
}

// RemovedTeam returns the removed IDs of the "team" edge to the Team entity.
func (m *ProgressMutation) RemovedTeamIDs() (ids []int) {
	for id := range m.removedteam {
		ids = append(ids, id)
	}
	return
}

// TeamIDs returns the "team" edge IDs in the mutation.
func (m *ProgressMutation) TeamIDs() (ids []int) {
	for id := range m.team {
		ids = append(ids, id)
	}
	return
}

// ResetTeam resets all changes to the "team" edge.
func (m *ProgressMutation) ResetTeam() {
	m.team = nil
	m.clearedteam = false
	m.removedteam = nil
}

// SetAdventureID sets the "adventure" edge to the Adventure entity by id.
func (m *ProgressMutation) SetAdventureID(id int) {
	m.adventure = &id
}

// ClearAdventure clears the "adventure" edge to the Adventure entity.
func (m *ProgressMutation) ClearAdventure() {
	m.clearedadventure = true
}

// AdventureCleared reports if the "adventure" edge to the Adventure entity was cleared.
func (m *ProgressMutation) AdventureCleared() bool {
	return m.clearedadventure
}

// AdventureID returns the "adventure" edge ID in the mutation.
func (m *ProgressMutation) AdventureID() (id int, exists bool) {
	if m.adventure != nil {
		return *m.adventure, true
	}
	return
}

// AdventureIDs returns the "adventure" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AdventureID instead. It exists only for internal usage by the builders.
func (m *ProgressMutation) AdventureIDs() (ids []int) {
	if id := m.adventure; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAdventure resets all changes to the "adventure" edge.
func (m *ProgressMutation) ResetAdventure() {
	m.adventure = nil
	m.clearedadventure = false
}

// SetQuestionID sets the "question" edge to the Question entity by id.
func (m *ProgressMutation) SetQuestionID(id int) {
	m.question = &id
}

// ClearQuestion clears the "question" edge to the Question entity.
func (m *ProgressMutation) ClearQuestion() {
	m.clearedquestion = true
}

// QuestionCleared reports if the "question" edge to the Question entity was cleared.
func (m *ProgressMutation) QuestionCleared() bool {
	return m.clearedquestion
}

// QuestionID returns the "question" edge ID in the mutation.
func (m *ProgressMutation) QuestionID() (id int, exists bool) {
	if m.question != nil {
		return *m.question, true
	}
	return
}

// QuestionIDs returns the "question" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QuestionID instead. It exists only for internal usage by the builders.
func (m *ProgressMutation) QuestionIDs() (ids []int) {
	if id := m.question; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuestion resets all changes to the "question" edge.
func (m *ProgressMutation) ResetQuestion() {
	m.question = nil
	m.clearedquestion = false
}

// Where appends a list predicates to the ProgressMutation builder.
func (m *ProgressMutation) Where(ps ...predicate.Progress) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProgressMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Progress).
func (m *ProgressMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProgressMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProgressMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProgressMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Progress field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProgressMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Progress field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProgressMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProgressMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProgressMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Progress numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProgressMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProgressMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProgressMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Progress nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProgressMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Progress field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProgressMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.team != nil {
		edges = append(edges, progress.EdgeTeam)
	}
	if m.adventure != nil {
		edges = append(edges, progress.EdgeAdventure)
	}
	if m.question != nil {
		edges = append(edges, progress.EdgeQuestion)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProgressMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case progress.EdgeTeam:
		ids := make([]ent.Value, 0, len(m.team))
		for id := range m.team {
			ids = append(ids, id)
		}
		return ids
	case progress.EdgeAdventure:
		if id := m.adventure; id != nil {
			return []ent.Value{*id}
		}
	case progress.EdgeQuestion:
		if id := m.question; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProgressMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedteam != nil {
		edges = append(edges, progress.EdgeTeam)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProgressMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case progress.EdgeTeam:
		ids := make([]ent.Value, 0, len(m.removedteam))
		for id := range m.removedteam {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProgressMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedteam {
		edges = append(edges, progress.EdgeTeam)
	}
	if m.clearedadventure {
		edges = append(edges, progress.EdgeAdventure)
	}
	if m.clearedquestion {
		edges = append(edges, progress.EdgeQuestion)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProgressMutation) EdgeCleared(name string) bool {
	switch name {
	case progress.EdgeTeam:
		return m.clearedteam
	case progress.EdgeAdventure:
		return m.clearedadventure
	case progress.EdgeQuestion:
		return m.clearedquestion
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProgressMutation) ClearEdge(name string) error {
	switch name {
	case progress.EdgeAdventure:
		m.ClearAdventure()
		return nil
	case progress.EdgeQuestion:
		m.ClearQuestion()
		return nil
	}
	return fmt.Errorf("unknown Progress unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProgressMutation) ResetEdge(name string) error {
	switch name {
	case progress.EdgeTeam:
		m.ResetTeam()
		return nil
	case progress.EdgeAdventure:
		m.ResetAdventure()
		return nil
	case progress.EdgeQuestion:
		m.ResetQuestion()
		return nil
	}
	return fmt.Errorf("unknown Progress edge %s", name)
}

// QuestionMutation represents an operation that mutates the Question nodes in the graph.
type QuestionMutation struct {
	config
	op               Op
	typ              string
	id               *int
	title            *string
	answer           *string
	clearedFields    map[string]struct{}
	adventure        *int
	clearedadventure bool
	done             bool
	oldValue         func(context.Context) (*Question, error)
	predicates       []predicate.Question
}

var _ ent.Mutation = (*QuestionMutation)(nil)

// questionOption allows management of the mutation configuration using functional options.
type questionOption func(*QuestionMutation)

// newQuestionMutation creates new mutation for the Question entity.
func newQuestionMutation(c config, op Op, opts ...questionOption) *QuestionMutation {
	m := &QuestionMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionID sets the ID field of the mutation.
func withQuestionID(id int) questionOption {
	return func(m *QuestionMutation) {
		var (
			err   error
			once  sync.Once
			value *Question
		)
		m.oldValue = func(ctx context.Context) (*Question, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Question.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestion sets the old Question of the mutation.
func withQuestion(node *Question) questionOption {
	return func(m *QuestionMutation) {
		m.oldValue = func(context.Context) (*Question, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuestionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuestionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Question.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *QuestionMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *QuestionMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *QuestionMutation) ResetTitle() {
	m.title = nil
}

// SetAnswer sets the "answer" field.
func (m *QuestionMutation) SetAnswer(s string) {
	m.answer = &s
}

// Answer returns the value of the "answer" field in the mutation.
func (m *QuestionMutation) Answer() (r string, exists bool) {
	v := m.answer
	if v == nil {
		return
	}
	return *v, true
}

// OldAnswer returns the old "answer" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldAnswer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnswer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnswer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnswer: %w", err)
	}
	return oldValue.Answer, nil
}

// ResetAnswer resets all changes to the "answer" field.
func (m *QuestionMutation) ResetAnswer() {
	m.answer = nil
}

// SetAdventureID sets the "adventure" edge to the Adventure entity by id.
func (m *QuestionMutation) SetAdventureID(id int) {
	m.adventure = &id
}

// ClearAdventure clears the "adventure" edge to the Adventure entity.
func (m *QuestionMutation) ClearAdventure() {
	m.clearedadventure = true
}

// AdventureCleared reports if the "adventure" edge to the Adventure entity was cleared.
func (m *QuestionMutation) AdventureCleared() bool {
	return m.clearedadventure
}

// AdventureID returns the "adventure" edge ID in the mutation.
func (m *QuestionMutation) AdventureID() (id int, exists bool) {
	if m.adventure != nil {
		return *m.adventure, true
	}
	return
}

// AdventureIDs returns the "adventure" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AdventureID instead. It exists only for internal usage by the builders.
func (m *QuestionMutation) AdventureIDs() (ids []int) {
	if id := m.adventure; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAdventure resets all changes to the "adventure" edge.
func (m *QuestionMutation) ResetAdventure() {
	m.adventure = nil
	m.clearedadventure = false
}

// Where appends a list predicates to the QuestionMutation builder.
func (m *QuestionMutation) Where(ps ...predicate.Question) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *QuestionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Question).
func (m *QuestionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.title != nil {
		fields = append(fields, question.FieldTitle)
	}
	if m.answer != nil {
		fields = append(fields, question.FieldAnswer)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case question.FieldTitle:
		return m.Title()
	case question.FieldAnswer:
		return m.Answer()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case question.FieldTitle:
		return m.OldTitle(ctx)
	case question.FieldAnswer:
		return m.OldAnswer(ctx)
	}
	return nil, fmt.Errorf("unknown Question field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case question.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case question.FieldAnswer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnswer(v)
		return nil
	}
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Question numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Question nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionMutation) ResetField(name string) error {
	switch name {
	case question.FieldTitle:
		m.ResetTitle()
		return nil
	case question.FieldAnswer:
		m.ResetAnswer()
		return nil
	}
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.adventure != nil {
		edges = append(edges, question.EdgeAdventure)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case question.EdgeAdventure:
		if id := m.adventure; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedadventure {
		edges = append(edges, question.EdgeAdventure)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionMutation) EdgeCleared(name string) bool {
	switch name {
	case question.EdgeAdventure:
		return m.clearedadventure
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionMutation) ClearEdge(name string) error {
	switch name {
	case question.EdgeAdventure:
		m.ClearAdventure()
		return nil
	}
	return fmt.Errorf("unknown Question unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionMutation) ResetEdge(name string) error {
	switch name {
	case question.EdgeAdventure:
		m.ResetAdventure()
		return nil
	}
	return fmt.Errorf("unknown Question edge %s", name)
}

// TeamMutation represents an operation that mutates the Team nodes in the graph.
type TeamMutation struct {
	config
	op                Op
	typ               string
	id                *int
	create_time       *time.Time
	name              *string
	code              *string
	email             *string
	status            *team.Status
	clearedFields     map[string]struct{}
	adventures        map[int]struct{}
	removedadventures map[int]struct{}
	clearedadventures bool
	progress          map[int]struct{}
	removedprogress   map[int]struct{}
	clearedprogress   bool
	done              bool
	oldValue          func(context.Context) (*Team, error)
	predicates        []predicate.Team
}

var _ ent.Mutation = (*TeamMutation)(nil)

// teamOption allows management of the mutation configuration using functional options.
type teamOption func(*TeamMutation)

// newTeamMutation creates new mutation for the Team entity.
func newTeamMutation(c config, op Op, opts ...teamOption) *TeamMutation {
	m := &TeamMutation{
		config:        c,
		op:            op,
		typ:           TypeTeam,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTeamID sets the ID field of the mutation.
func withTeamID(id int) teamOption {
	return func(m *TeamMutation) {
		var (
			err   error
			once  sync.Once
			value *Team
		)
		m.oldValue = func(ctx context.Context) (*Team, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Team.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTeam sets the old Team of the mutation.
func withTeam(node *Team) teamOption {
	return func(m *TeamMutation) {
		m.oldValue = func(context.Context) (*Team, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TeamMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TeamMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TeamMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TeamMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Team.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *TeamMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TeamMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TeamMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetName sets the "name" field.
func (m *TeamMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TeamMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TeamMutation) ResetName() {
	m.name = nil
}

// SetCode sets the "code" field.
func (m *TeamMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *TeamMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *TeamMutation) ResetCode() {
	m.code = nil
}

// SetEmail sets the "email" field.
func (m *TeamMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *TeamMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *TeamMutation) ResetEmail() {
	m.email = nil
}

// SetStatus sets the "status" field.
func (m *TeamMutation) SetStatus(t team.Status) {
	m.status = &t
}

// Status returns the value of the "status" field in the mutation.
func (m *TeamMutation) Status() (r team.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldStatus(ctx context.Context) (v team.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TeamMutation) ResetStatus() {
	m.status = nil
}

// AddAdventureIDs adds the "adventures" edge to the Adventure entity by ids.
func (m *TeamMutation) AddAdventureIDs(ids ...int) {
	if m.adventures == nil {
		m.adventures = make(map[int]struct{})
	}
	for i := range ids {
		m.adventures[ids[i]] = struct{}{}
	}
}

// ClearAdventures clears the "adventures" edge to the Adventure entity.
func (m *TeamMutation) ClearAdventures() {
	m.clearedadventures = true
}

// AdventuresCleared reports if the "adventures" edge to the Adventure entity was cleared.
func (m *TeamMutation) AdventuresCleared() bool {
	return m.clearedadventures
}

// RemoveAdventureIDs removes the "adventures" edge to the Adventure entity by IDs.
func (m *TeamMutation) RemoveAdventureIDs(ids ...int) {
	if m.removedadventures == nil {
		m.removedadventures = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.adventures, ids[i])
		m.removedadventures[ids[i]] = struct{}{}
	}
}

// RemovedAdventures returns the removed IDs of the "adventures" edge to the Adventure entity.
func (m *TeamMutation) RemovedAdventuresIDs() (ids []int) {
	for id := range m.removedadventures {
		ids = append(ids, id)
	}
	return
}

// AdventuresIDs returns the "adventures" edge IDs in the mutation.
func (m *TeamMutation) AdventuresIDs() (ids []int) {
	for id := range m.adventures {
		ids = append(ids, id)
	}
	return
}

// ResetAdventures resets all changes to the "adventures" edge.
func (m *TeamMutation) ResetAdventures() {
	m.adventures = nil
	m.clearedadventures = false
	m.removedadventures = nil
}

// AddProgresIDs adds the "progress" edge to the Progress entity by ids.
func (m *TeamMutation) AddProgresIDs(ids ...int) {
	if m.progress == nil {
		m.progress = make(map[int]struct{})
	}
	for i := range ids {
		m.progress[ids[i]] = struct{}{}
	}
}

// ClearProgress clears the "progress" edge to the Progress entity.
func (m *TeamMutation) ClearProgress() {
	m.clearedprogress = true
}

// ProgressCleared reports if the "progress" edge to the Progress entity was cleared.
func (m *TeamMutation) ProgressCleared() bool {
	return m.clearedprogress
}

// RemoveProgresIDs removes the "progress" edge to the Progress entity by IDs.
func (m *TeamMutation) RemoveProgresIDs(ids ...int) {
	if m.removedprogress == nil {
		m.removedprogress = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.progress, ids[i])
		m.removedprogress[ids[i]] = struct{}{}
	}
}

// RemovedProgress returns the removed IDs of the "progress" edge to the Progress entity.
func (m *TeamMutation) RemovedProgressIDs() (ids []int) {
	for id := range m.removedprogress {
		ids = append(ids, id)
	}
	return
}

// ProgressIDs returns the "progress" edge IDs in the mutation.
func (m *TeamMutation) ProgressIDs() (ids []int) {
	for id := range m.progress {
		ids = append(ids, id)
	}
	return
}

// ResetProgress resets all changes to the "progress" edge.
func (m *TeamMutation) ResetProgress() {
	m.progress = nil
	m.clearedprogress = false
	m.removedprogress = nil
}

// Where appends a list predicates to the TeamMutation builder.
func (m *TeamMutation) Where(ps ...predicate.Team) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TeamMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Team).
func (m *TeamMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TeamMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, team.FieldCreateTime)
	}
	if m.name != nil {
		fields = append(fields, team.FieldName)
	}
	if m.code != nil {
		fields = append(fields, team.FieldCode)
	}
	if m.email != nil {
		fields = append(fields, team.FieldEmail)
	}
	if m.status != nil {
		fields = append(fields, team.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TeamMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case team.FieldCreateTime:
		return m.CreateTime()
	case team.FieldName:
		return m.Name()
	case team.FieldCode:
		return m.Code()
	case team.FieldEmail:
		return m.Email()
	case team.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TeamMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case team.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case team.FieldName:
		return m.OldName(ctx)
	case team.FieldCode:
		return m.OldCode(ctx)
	case team.FieldEmail:
		return m.OldEmail(ctx)
	case team.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Team field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeamMutation) SetField(name string, value ent.Value) error {
	switch name {
	case team.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case team.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case team.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case team.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case team.FieldStatus:
		v, ok := value.(team.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Team field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TeamMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TeamMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeamMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Team numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TeamMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TeamMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TeamMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Team nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TeamMutation) ResetField(name string) error {
	switch name {
	case team.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case team.FieldName:
		m.ResetName()
		return nil
	case team.FieldCode:
		m.ResetCode()
		return nil
	case team.FieldEmail:
		m.ResetEmail()
		return nil
	case team.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Team field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TeamMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.adventures != nil {
		edges = append(edges, team.EdgeAdventures)
	}
	if m.progress != nil {
		edges = append(edges, team.EdgeProgress)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TeamMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case team.EdgeAdventures:
		ids := make([]ent.Value, 0, len(m.adventures))
		for id := range m.adventures {
			ids = append(ids, id)
		}
		return ids
	case team.EdgeProgress:
		ids := make([]ent.Value, 0, len(m.progress))
		for id := range m.progress {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TeamMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedadventures != nil {
		edges = append(edges, team.EdgeAdventures)
	}
	if m.removedprogress != nil {
		edges = append(edges, team.EdgeProgress)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TeamMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case team.EdgeAdventures:
		ids := make([]ent.Value, 0, len(m.removedadventures))
		for id := range m.removedadventures {
			ids = append(ids, id)
		}
		return ids
	case team.EdgeProgress:
		ids := make([]ent.Value, 0, len(m.removedprogress))
		for id := range m.removedprogress {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TeamMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedadventures {
		edges = append(edges, team.EdgeAdventures)
	}
	if m.clearedprogress {
		edges = append(edges, team.EdgeProgress)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TeamMutation) EdgeCleared(name string) bool {
	switch name {
	case team.EdgeAdventures:
		return m.clearedadventures
	case team.EdgeProgress:
		return m.clearedprogress
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TeamMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Team unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TeamMutation) ResetEdge(name string) error {
	switch name {
	case team.EdgeAdventures:
		m.ResetAdventures()
		return nil
	case team.EdgeProgress:
		m.ResetProgress()
		return nil
	}
	return fmt.Errorf("unknown Team edge %s", name)
}
